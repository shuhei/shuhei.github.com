{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts"},"post":{"layout":"post","title":"Node.js executable module","date":"2015-10-25 22:42","comments":true,"categories":["JavaScript"],"url":"/blog/2015/10/25/node-executable-module/","content":"<p>You may want to create a Node module that is also an executable. The convention is to create two files, one for lib and the other for bin, but I think it&#39;s OK for simple modules.</p>\n<p>To achieve it, you need to detect whether it&#39;s executed as an entry point. According to <a href=\"https://nodejs.org/api/modules.html#modules_accessing_the_main_module\">the official documentation of Node</a>:</p>\n<blockquote>\n<p>When a file is run directly from Node.js, <code>require.main</code> is set to its module. That means that you can determine whether a file has been run directly by testing</p>\n<pre><code class=\"hljs undefined\">require.main === module</code></pre></blockquote>\n<p>For example:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-meta\">#!/usr/bin/env node</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">a, b</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> a + b;\n}\n\n<span class=\"hljs-built_in\">module</span>.exports = sum;\n\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">require</span>.main === <span class=\"hljs-built_in\">module</span>) {\n  <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">parseInt</span>(process.argv[<span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">10</span>);\n  <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-built_in\">parseInt</span>(process.argv[<span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">10</span>);\n  <span class=\"hljs-built_in\">console</span>.log(sum(a, b));\n}</code></pre><p>Then you can use it as an executable and a module.</p>\n<pre><code class=\"hljs sh\">$ node sum.js 3 4\n7\n$ node\n&gt; require(<span class=\"hljs-string\">'./sum'</span>)(3, 4)\n7</code></pre>"}}