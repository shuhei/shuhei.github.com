{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts"},"post":{"layout":"post","title":"Using highlight.js with marked","date":"2015-09-21 18:09","comments":true,"categories":["JavaScript"],"url":"/blog/2015/09/21/using-highlight-js-with-marked/","content":"<p>I use <a href=\"https://github.com/chjj/marked\">marked</a> to parse markdown files of posts and pages, and <a href=\"https://github.com/isagalaev/highlight.js\">highlight.js</a> to highlight code blocks in them for this site. Here are problems that I came across to make them work together and a workaround for them.</p>\n<p>marked&#39;s README has <a href=\"https://github.com/chjj/marked#highlight\">an example on how to configure it to work with highlight.js</a> but it doesn&#39;t add <code>hljs</code> classes on <code>&lt;code&gt;</code> tags that highlight.js uses to style code blocks. At the moment, you have to <a href=\"https://github.com/chjj/marked/pull/418#issuecomment-57291402\">prepare your own renderer</a> to achieve it.</p>\n<p>Also, you need to check whether the language given by marked is a valid one for highlight.js. <a href=\"https://github.com/chjj/marked/issues/311#issuecomment-31182632\">highlight.js seems to have had <code>LANGUAGES</code> property a few years ago</a> but now <code>getLanguage()</code> method serves as a substitute for it.</p>\n<p>Here&#39;s the outcome:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> marked, { Renderer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'marked'</span>;\n<span class=\"hljs-keyword\">import</span> highlightjs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'highlight.js'</span>;\n\n<span class=\"hljs-comment\">// Create your custom renderer.</span>\n<span class=\"hljs-keyword\">const</span> renderer = <span class=\"hljs-keyword\">new</span> Renderer();\nrenderer.code = <span class=\"hljs-function\">(<span class=\"hljs-params\">code, language</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// Check whether the given language is valid for highlight.js.</span>\n  <span class=\"hljs-keyword\">const</span> validLang = !!(language &amp;&amp; highlightjs.getLanguage(language));\n  <span class=\"hljs-comment\">// Highlight only if the language is valid.</span>\n  <span class=\"hljs-keyword\">const</span> highlighted = validLang ? highlightjs.highlight(language, code).value : code;\n  <span class=\"hljs-comment\">// Render the highlighted code with `hljs` class.</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`&lt;pre&gt;&lt;code class=\"hljs <span class=\"hljs-subst\">${language}</span>\"&gt;<span class=\"hljs-subst\">${highlighted}</span>&lt;/code&gt;&lt;/pre&gt;`</span>;\n};\n\n<span class=\"hljs-comment\">// Set the renderer to marked.</span>\nmarked.setOptions({ renderer });</code></pre>"}}