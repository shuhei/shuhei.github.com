{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts"},"post":{"layout":"post","title":"Angular 2 with Babel","date":"2016-05-08 15:47","comments":true,"categories":["JavaScript","Angular 2","Babel"],"url":"/blog/2016/05/08/angular-2-with-babel/","content":"<p>Although Angular 2&#39;s primary language is apparently TypeScript, many people want to use Babel as shown in <a href=\"http://angularjs.blogspot.jp/2015/09/angular-2-survey-results.html\">a survey</a>.</p>\n<p>However, <a href=\"https://angular.io\">The official documentation</a> targets only TypeScript and ES5. In addition, many pages are not yet available for ES5. That is because Angular 2 relies heavily on cutting-edge ES7 decorators and TypeScript&#39;s type annotations for annotating components and services.</p>\n<p>To fill the gap, you can use <a href=\"https://github.com/shuhei/babel-preset-angular2\"><code>babel-preset-angular2</code></a> that supports all the decorators and annotations available in TypeScript. With the preset, you can follow the official documentation for TypeScript to learn Angular 2 itself.</p>\n<h2 id=\"how-to-use-it\">How to use it</h2>\n<pre><code class=\"hljs sh\">npm install -D babel-preset-es2015 babel-preset-angular2</code></pre><p>Add <code>presets</code> to <code>.babelrc</code>. Note that the <code>presets</code>&#39; order is important.</p>\n<pre><code class=\"hljs json\">{\n  <span class=\"hljs-attr\">\"presets\"</span>: [<span class=\"hljs-string\">\"es2015\"</span>, <span class=\"hljs-string\">\"angular2\"</span>]\n}</code></pre><p>See <a href=\"https://github.com/shuhei/babel-angular2-app\"><code>babel-angular2-app</code></a> for more complete example.</p>\n<h2 id=\"supported-annotations\">Supported annotations</h2>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Example</th>\n<th>EcmaScript</th>\n<th>TypeScript</th>\n<th>Babel*</th>\n<th>Babel + angular2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Class decorator</td>\n<td><code>@Component()</code></td>\n<td>Stage 1</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Property decorator</td>\n<td><code>@Input()</code></td>\n<td>Stage 1</td>\n<td>Yes</td>\n<td>Partial*</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Parameter decorator</td>\n<td><code>@Optional()</code></td>\n<td>Stage 0</td>\n<td>Yes</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Type annotation</td>\n<td><code>foo: Foo</code></td>\n<td>-</td>\n<td>Yes</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n<p>&quot;Babel*&quot; above means Babel with the following official plugins:</p>\n<ul>\n<li><a href=\"https://babeljs.io/docs/plugins/preset-es2015/\">babel-preset-es2015</a></li>\n<li><a href=\"https://babeljs.io/docs/plugins/transform-class-properties/\">babel-plugin-transform-class-properties</a></li>\n<li><a href=\"https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy\">babel-plugin-transform-decorators-legacy</a> (not literally official but maintained by <a href=\"https://github.com/loganfsmyth\">@loganfsmyth</a>, one of Babel&#39;s core contributors)</li>\n</ul>\n<p>Property decorator in Babel is marked &quot;Partial&quot; because <code>babel-plugin-transform-decorators-legacy</code> ignores class properties without initializers.</p>\n<p>You can emulate parameter decorator and type annotation with plain ES2015 like the following but it&#39;s a little bit counterintuitive.</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloComponent</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(foo: Foo, @Optional() bar: Bar) {\n    <span class=\"hljs-comment\">// Do something with foo and bar.</span>\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloComponent</span> </span>{\n  <span class=\"hljs-keyword\">static</span> get parameters() {\n    <span class=\"hljs-keyword\">return</span> [[Foo], [Bar, Optional()]];\n  }\n\n  <span class=\"hljs-keyword\">constructor</span>(foo, bar) {\n    <span class=\"hljs-comment\">// Do something with foo and bar.</span>\n  }\n}</code></pre><h2 id=\"polyfills\">Polyfills</h2>\n<p>Angular 2 beta versions had polyfill bundles but RC versions don&#39;t. But never mind. We can just import them before bootstrapping our app.</p>\n<pre><code class=\"hljs sh\">npm install -S babel-polyfill zone.js</code></pre><p><code>src/index.js</code></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Import polyfills.</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'babel-polyfill'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'zone.js/dist/zone.js'</span>;\n\n<span class=\"hljs-comment\">// Bootstrap app!</span>\n<span class=\"hljs-keyword\">import</span> {provide} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> {bootstrap} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/platform-browser-dynamic'</span>;\n<span class=\"hljs-keyword\">import</span> {ROUTER_PROVIDERS} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/router'</span>;\n<span class=\"hljs-keyword\">import</span> {LocationStrategy, HashLocationStrategy} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/common'</span>;\n\n<span class=\"hljs-keyword\">import</span> {HelloApp} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app'</span>;\n\nbootstrap(HelloApp, [\n  ROUTER_PROVIDERS,\n  provide(LocationStrategy, { <span class=\"hljs-attr\">useClass</span>: HashLocationStrategy })\n]).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.error(err));</code></pre><p>Note that we can use <code>babel-polyfill</code> that includes <code>core-js</code> instead of <code>es6-shim</code> and <code>reflect-metadata</code>. According to <a href=\"https://github.com/angular/angular/issues/5755\">use core-js instead of es6-shim</a>, we can use whatever ES6 + ES7 polyfill we like.</p>\n<h2 id=\"module-resolution\">Module resolution</h2>\n<p>You can use any module resolver as long as it works with Babel. I&#39;ll pick <a href=\"http://browserify.org/\">Browserify</a> here for its simplicity.</p>\n<pre><code class=\"hljs js\">npm install -D browserify babelify</code></pre><p>Add a <code>build</code> script to your <code>package.json</code> assuming that your bootstrap script locates at <code>src/index.js</code>.</p>\n<pre><code class=\"hljs json\">{\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"build\"</span>: <span class=\"hljs-string\">\"browserify -t babelify src/index &gt; public/bundle.js\"</span>\n  }\n}</code></pre><pre><code class=\"hljs sh\">npm run build</code></pre><p>Isn&#39;t this simple? <code>babelify</code> automatically finds your <code>.babelrc</code> and uses the presets specified above.</p>\n<p>Of course you can use other module resolvers like Webpack or SystemJS.</p>\n<h2 id=\"offline-compilation\">Offline compilation</h2>\n<p>This is not yet available for Babel. Not completed even for TypeScript.</p>\n<p>The <a href=\"https://github.com/angular/angular/tree/master/modules/%40angular/compiler_cli\"><code>compiler_cli</code></a> seems to be deeply integrated with TypeScript compiler. It <strong>statically</strong> collects metadata from the source and feed it to the compiler. I believe that it is achievable with Babel to do the same thing.</p>\n<p>I&#39;m thinking of working on it once the TypeScript version is published and the compiler API becomes more stable.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>I&#39;ve presented how to use TypeScript-specific annotations in Babel. You can enjoy Angular 2 with your favorite transpiler.</p>\n<p>See <a href=\"https://github.com/shuhei/babel-angular2-app\"><code>babel-angular2-app</code></a> for more complete example.</p>\n"}}