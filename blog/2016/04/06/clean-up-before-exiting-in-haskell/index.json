{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts"},"post":{"layout":"post","title":"Clean up before exiting in Haskell","date":"2016-04-06 00:32","comments":true,"categories":["Haskell"],"url":"/blog/2016/04/06/clean-up-before-exiting-in-haskell/","content":"<p>Once upon a time (or a several days ago), I was reading <a href=\"http://amzn.to/22Qe9zf\">Programming in Haskell</a>. When I ran 9.7&#39;s Game of Life, which shows Game of Life animation on the terminal, the terminal&#39;s cursor was flickering and annoying. So I tried to hide it when starting and show when exiting.</p>\n<pre><code class=\"hljs hs\"><span class=\"hljs-import\"><span class=\"hljs-keyword\">import</span> System.Process <span class=\"hljs-container\">(<span class=\"hljs-title\">system</span>)</span></span>\n\n<span class=\"hljs-title\">main</span> :: <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-comment\">-- Hide the cursor</span>\n  system <span class=\"hljs-string\">\"tput civis\"</span>\n  <span class=\"hljs-comment\">-- Show the Game of Life</span>\n  life glider\n  <span class=\"hljs-comment\">-- Show the cursor (but the code does not reach here!)</span>\n  system <span class=\"hljs-string\">\"tput cvvis\"</span>\n  return ()\n\n<span class=\"hljs-title\">life</span> :: <span class=\"hljs-type\">Board</span> -&gt; <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">glider</span> :: <span class=\"hljs-type\">Board</span></code></pre><p>But the code does not reach the line that shows the cursor because <code>life</code> is a infinite loop. If I quit the program with <code>Ctrl+C</code>, the cursor remains hidden.</p>\n<p>So I wrote a function that loops <code>a -&gt; IO a</code> until interrupted by a signal, referring to <a href=\"http://stackoverflow.com/a/18430872/822317\">unix - Killing a Haskell binary - Stack Overflow</a>. It manages a state of whether the program was interrupted in a <code>MVar</code> and stops the loop when interrupted.</p>\n<pre><code class=\"hljs hs\"><span class=\"hljs-import\"><span class=\"hljs-keyword\">import</span> Control.Concurrent.MVar <span class=\"hljs-container\">(<span class=\"hljs-type\">MVar</span>, <span class=\"hljs-title\">newEmptyMVar</span>, <span class=\"hljs-title\">putMVar</span>, <span class=\"hljs-title\">tryTakeMVar</span>)</span></span>\n<span class=\"hljs-import\"><span class=\"hljs-keyword\">import</span> System.Posix.Signals <span class=\"hljs-container\">(<span class=\"hljs-type\">Handler</span>, <span class=\"hljs-type\">Handler(CatchOnce)</span>, <span class=\"hljs-title\">installHandler</span>, <span class=\"hljs-title\">sigINT</span>, <span class=\"hljs-title\">sigTERM</span>)</span></span>\n\n<span class=\"hljs-title\">loopUntilInterruption</span> :: (a -&gt; <span class=\"hljs-type\">IO</span> a) -&gt; a -&gt; <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">loopUntilInterruption</span> p init = <span class=\"hljs-keyword\">do</span>\n  v &lt;- newEmptyMVar\n  installHandler sigINT (handler v) <span class=\"hljs-type\">Nothing</span>\n  installHandler sigTERM (handler v) <span class=\"hljs-type\">Nothing</span>\n  loop v p init\n\n<span class=\"hljs-title\">handler</span> :: <span class=\"hljs-type\">MVar</span> () -&gt; <span class=\"hljs-type\">Handler</span>\n<span class=\"hljs-title\">handler</span> v = <span class=\"hljs-type\">CatchOnce</span> $ putMVar v ()\n\n<span class=\"hljs-title\">loop</span> :: <span class=\"hljs-type\">MVar</span> () -&gt; (a -&gt; <span class=\"hljs-type\">IO</span> a) -&gt; a -&gt; <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">loop</span> v p prev = <span class=\"hljs-keyword\">do</span>\n  x &lt;- p prev\n  val &lt;- tryTakeMVar v\n  <span class=\"hljs-keyword\">case</span> val <span class=\"hljs-keyword\">of</span>\n    <span class=\"hljs-type\">Just</span> _ -&gt; return ()\n    <span class=\"hljs-type\">Nothing</span> -&gt; loop v p x &gt;&gt; return ()</code></pre><p>In the Game of Life, I changed the type of <code>life</code> so that it returns the result of its previous result and loop with <code>loop</code>. Now the clean up code will be called when interrupted by a signal.</p>\n<pre><code class=\"hljs hs\"><span class=\"hljs-import\"><span class=\"hljs-keyword\">import</span> System.Process <span class=\"hljs-container\">(<span class=\"hljs-title\">system</span>)</span></span>\n\n<span class=\"hljs-title\">main</span> :: <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-comment\">-- Hide the cursor</span>\n  system <span class=\"hljs-string\">\"tput civis\"</span>\n  <span class=\"hljs-comment\">-- Loop until interrupted</span>\n  loopUntilInterruption life glider\n  <span class=\"hljs-comment\">-- Show the cursor (the code will reach here now!)</span>\n  system <span class=\"hljs-string\">\"tput cvvis\"</span>\n  return ()\n\n<span class=\"hljs-title\">life</span> :: <span class=\"hljs-type\">Board</span> -&gt; <span class=\"hljs-type\">IO</span> <span class=\"hljs-type\">Board</span>\n<span class=\"hljs-title\">glider</span> :: <span class=\"hljs-type\">Board</span></code></pre><p>And they lived happily ever after.</p>\n"}}