{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts"},"post":{"layout":"post","title":"One-time binding for ng-if","date":"2016-04-05 23:58","comments":true,"categories":["JavaScript","AngularJS"],"url":"/blog/2016/04/05/one-time-binding-for-ng-if/","content":"<p>AngularJS&#39;s <a href=\"https://docs.angularjs.org/guide/expression#one-time-binding\">one-time binding</a> is useful to reduce the number of watches. It stops watching its expression once it becomes defined. It kindly keeps watching while the value is <code>undefined</code> for cases like asynchronous data fetching. But the kindness can be a pitfall especially for directives that take <code>boolean</code> expressions like <code>ng-if</code>.</p>\n<p>Here&#39;s an ordinary piece of AngularJS template. It shows &#39;Something&#39; when <code>obj.prop</code> exists.</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">ng-if</span>=<span class=\"hljs-string\">\"::obj.prop\"</span>&gt;</span>Something<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre><p>It works almost fine. But it keeps watching the expression when the message is hidden. Guess what?</p>\n<p>Yes! It keeps watching while the expression is <code>undefined</code>. Let&#39;s make sure that it&#39;s always <code>boolean</code>.</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">ng-if</span>=<span class=\"hljs-string\">\"::!!obj.prop\"</span>&gt;</span>Something<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre><p>Here we see the birth of a new operator <code>::!!</code>!</p>\n"}}