{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts"},"posts":[{"layout":"post","title":"irb で日本語表示","published":true,"date":"2009-12-31 15:46","comments":true,"tags":null,"categories":null,"url":"/blog/2009/12/31/japanese-on-irb/","content":"<pre class=\"prettyprint\">$irb\nirb(main):001:0&gt;puts \"あああ\"\n\"\\343\\201\\202\\343\\201\\202\\343\\201\\202\"\n=&gt; nil</pre>\n<p>上の例のように、日本語出力が読めない問題。</p>\n<p>$<span class=\"caps\">KCODE</span> に使用中のターミナルの文字コードを設定すれば良いようです。<br />\n<span class=\"caps\">UTF</span>-8 なら <code>$KCODE = 'u'</code> 、<span class=\"caps\">EUC</span>-JP なら <code>$KCODE = 'e'</code> など。<br />\nirb コマンドのオプションでも指定できます。<br />\n<code>irb -Ku</code> とか <code>irb -Ke</code> とか。</p>\n<p>via <a href=\"http://rubyist.g.hatena.ne.jp/gaba/20060702/p6\">irb で日本語出来た &#8211; 只今Ruby勉強中 &#8211; Rubyist</a></p>"},{"layout":"post","title":"ascii コード","published":true,"date":"2009-12-09 22:51","comments":true,"tags":null,"categories":[],"url":"/blog/2009/12/09/ascii/","content":"<p><a href=\"http://www.collegehumor.com/picture:1916681\">How else would you get away with swearing in a paper? &#8211; CollegeHumor picture</a> を訳してみました。</p>\n<blockquote>\n<p>Poem.</p>\n<p>You translated my poem,<br />\nI congratulate you.<br />\nI wish I could rhyme with poem,<br />\nbut its very hard to.<br />\nI just beguiled you,</p>\n</blockquote>\n<p>irb で下のような関数を書いてから、ひたすら 0 と 1 を打ち込み・・・。</p>\n<pre class=\"prettyprint\">class String\n  def bin\n    Integer('0b' + self)\n  end\nend\n\ndef decode(ascii)\n  0.step(ascii.size - 1, 8) do |num|\n    puts ascii[num..(num + 7)].bin.chr\n  end\nend</pre>\n<p>作る方は簡単でしょうが、読む方は大変です。</p>"},{"layout":"post","title":"Xcode で例外発生時のスタックトレースをデバッガに表示","published":true,"date":"2009-11-14 10:07","comments":true,"tags":null,"categories":[],"url":"/blog/2009/11/14/show-stacktrace-of-exception-on-xcode/","content":"<p>iPhone アプリの開発で例外が発生したとき、Xcode のコンソールにはスタックトレースのアドレス（？）が表示されるだけで、内容がわかりません。<br />\nObjective-C ランタイムの例外送出部分にブレークポイントを設定することで、例外発生時のスタックトレースやコード中のオブジェクトの値をデバッガで詳しく見ることができます。</p>\n<h3>方法</h3>\n<p>&#8220;実行&#8221; =&gt; &#8220;ブレークポイントを管理&#8221; =&gt; &#8220;シンボリックブレークポイントを追加&#8221; を実行します。</p>\n<p><img src=\"/images/2009/11/symbolic_break_point1.png\" alt=\"\" /></p>\n<p>出てきたダイアログに <code>objc_exception_throw</code> と入力。<br />\nこれで、例外が発生した時にブレークされ、デバッガで詳細を見る事ができるようになります。</p>\n<p><img src=\"/images/2009/11/debugger1.png\" alt=\"\" /></p>\n<p>デバッガなので、もちろんコード中のオブジェクトの値を見ることもできます。便利ですね。</p>\n<p>via <a href=\"http://www.markj.net/debugging-tip-objc_exception_throw-breakpoint/\">Debugging Tip – objc_exception_throw breakpoint | markjnet</a></p>\n<h3>シンボリックブレークポイント</h3>\n<p>通常のブレークポイントではソースコード中の行を指定しますが、シンボリックブレークポイントはシンボル単位で指定するブレークポイントです。<br />\nですので「あの関数が呼ばれたらブレーク」や「あのクラスのあのメソッドが呼ばれたらブレーク」ということができます。<br />\n今回の objc_exception_throw は Objective-C のランタイム中にある例外を送出する関数のようですね。</p>"}],"prevPage":"/blog/pages/18/","title":"Page 19 - Shuhei Kagawa","nextPage":"/blog/pages/20/"}