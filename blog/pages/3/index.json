{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts"},"posts":[{"layout":"post","title":"Incremental search with RxJS switchMap","date":"2016-05-02 02:18","comments":true,"categories":["JavaScript","RxJS"],"url":"/blog/2016/05/01/incremental-search-with-rxjs/","content":"<p>RxJS leads us to better design separating data flow and side-effects. In addition, it provides powerful functionalities that sophisticate the outcome application. My favorite is <a href=\"http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-switchMap\"><code>switchMap</code></a> of RxJS 5, which is equivalent to <a href=\"https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/flatmaplatest.md\"><code>flatMapLatest</code></a> in RxJS 4.</p>\n<h2 id=\"switchmap\">switchMap</h2>\n<p><code>switchMap(func)</code> is equivalent to <code>map(func).switch()</code>. It keeps subscribing latest observable at the moment and unsubscribing outdated ones so that it only streams events from latest observable at the moment. <a href=\"http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-switch\">Take a look at the marble chart for <code>switch</code></a>. It illustrates the behavior well.</p>\n<h2 id=\"incremental-search\">Incremental search</h2>\n<p><code>switchMap</code> is convenient for properly implementing incremental search. Incremental search makes multiple requests to a server. The server can respond in a different order from requests&#39;. Because of the order, a naive implementation may show a wrong result. However, you can effortlessly avoid the caveat if you use <code>switchMap</code>.</p>\n<p>Here is an example. Type fast in the text fields. <strong>Without switchMap</strong> sometimes shows a wrong result while <strong>With switchMap</strong> always works fine.</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/megiqo/embed?output\">JS Bin on jsbin.com</a><script async src=\"http://static.jsbin.com/js/embed.min.js?3.35.12\"></script></p>\n<p><code>search</code> function mocks an AJAX request. It returns a <code>Promise</code> that resolves after a random delay.</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">search</span>(<span class=\"hljs-params\">keyword</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      resolve(<span class=\"hljs-string\">'Result of '</span> + keyword);\n    }, <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">1000</span>);\n  });\n}</code></pre><p>A naive implementation always shows the last response at the time. A wrong result is shown if responses come in a different order from requests&#39;. We could add some debouncing to decrease the chance of the wrong order but it still may happen when response time is longer than the debounce time.</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> keyword = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'keyword-without'</span>);\n<span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'result-without'</span>);\n\nkeyword.addEventListener(<span class=\"hljs-string\">'keyup'</span>, e =&gt; {\n  <span class=\"hljs-keyword\">const</span> value = e.target.value;\n  search(value)\n    .then(data =&gt; result.textContent = data);\n});</code></pre><p><code>switchMap</code> guarantees that the last keyword&#39;s result is finally shown.</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> keyword = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'keyword-with'</span>);\n<span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'result-with'</span>);\n\n<span class=\"hljs-keyword\">const</span> keyword$ = Rx.Observable.fromEvent(keyword, <span class=\"hljs-string\">'keyup'</span>)\n  .map(e =&gt; e.target.value);\nkeyword$\n  .switchMap(search)\n  .subscribe(data =&gt; result.textContent = data);</code></pre>"},{"layout":"post","title":"Clean up before exiting in Haskell","date":"2016-04-06 00:32","comments":true,"categories":["Haskell"],"url":"/blog/2016/04/06/clean-up-before-exiting-in-haskell/","content":"<p>Once upon a time (or a several days ago), I was reading <a href=\"http://amzn.to/22Qe9zf\">Programming in Haskell</a>. When I ran 9.7&#39;s Game of Life, which shows Game of Life animation on the terminal, the terminal&#39;s cursor was flickering and annoying. So I tried to hide it when starting and show when exiting.</p>\n<pre><code class=\"hljs hs\"><span class=\"hljs-import\"><span class=\"hljs-keyword\">import</span> System.Process <span class=\"hljs-container\">(<span class=\"hljs-title\">system</span>)</span></span>\n\n<span class=\"hljs-title\">main</span> :: <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-comment\">-- Hide the cursor</span>\n  system <span class=\"hljs-string\">\"tput civis\"</span>\n  <span class=\"hljs-comment\">-- Show the Game of Life</span>\n  life glider\n  <span class=\"hljs-comment\">-- Show the cursor (but the code does not reach here!)</span>\n  system <span class=\"hljs-string\">\"tput cvvis\"</span>\n  return ()\n\n<span class=\"hljs-title\">life</span> :: <span class=\"hljs-type\">Board</span> -&gt; <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">glider</span> :: <span class=\"hljs-type\">Board</span></code></pre><p>But the code does not reach the line that shows the cursor because <code>life</code> is a infinite loop. If I quit the program with <code>Ctrl+C</code>, the cursor remains hidden.</p>\n<p>So I wrote a function that loops <code>a -&gt; IO a</code> until interrupted by a signal, referring to <a href=\"http://stackoverflow.com/a/18430872/822317\">unix - Killing a Haskell binary - Stack Overflow</a>. It manages a state of whether the program was interrupted in a <code>MVar</code> and stops the loop when interrupted.</p>\n<pre><code class=\"hljs hs\"><span class=\"hljs-import\"><span class=\"hljs-keyword\">import</span> Control.Concurrent.MVar <span class=\"hljs-container\">(<span class=\"hljs-type\">MVar</span>, <span class=\"hljs-title\">newEmptyMVar</span>, <span class=\"hljs-title\">putMVar</span>, <span class=\"hljs-title\">tryTakeMVar</span>)</span></span>\n<span class=\"hljs-import\"><span class=\"hljs-keyword\">import</span> System.Posix.Signals <span class=\"hljs-container\">(<span class=\"hljs-type\">Handler</span>, <span class=\"hljs-type\">Handler(CatchOnce)</span>, <span class=\"hljs-title\">installHandler</span>, <span class=\"hljs-title\">sigINT</span>, <span class=\"hljs-title\">sigTERM</span>)</span></span>\n\n<span class=\"hljs-title\">loopUntilInterruption</span> :: (a -&gt; <span class=\"hljs-type\">IO</span> a) -&gt; a -&gt; <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">loopUntilInterruption</span> p init = <span class=\"hljs-keyword\">do</span>\n  v &lt;- newEmptyMVar\n  installHandler sigINT (handler v) <span class=\"hljs-type\">Nothing</span>\n  installHandler sigTERM (handler v) <span class=\"hljs-type\">Nothing</span>\n  loop v p init\n\n<span class=\"hljs-title\">handler</span> :: <span class=\"hljs-type\">MVar</span> () -&gt; <span class=\"hljs-type\">Handler</span>\n<span class=\"hljs-title\">handler</span> v = <span class=\"hljs-type\">CatchOnce</span> $ putMVar v ()\n\n<span class=\"hljs-title\">loop</span> :: <span class=\"hljs-type\">MVar</span> () -&gt; (a -&gt; <span class=\"hljs-type\">IO</span> a) -&gt; a -&gt; <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">loop</span> v p prev = <span class=\"hljs-keyword\">do</span>\n  x &lt;- p prev\n  val &lt;- tryTakeMVar v\n  <span class=\"hljs-keyword\">case</span> val <span class=\"hljs-keyword\">of</span>\n    <span class=\"hljs-type\">Just</span> _ -&gt; return ()\n    <span class=\"hljs-type\">Nothing</span> -&gt; loop v p x &gt;&gt; return ()</code></pre><p>In the Game of Life, I changed the type of <code>life</code> so that it returns the result of its previous result and loop with <code>loop</code>. Now the clean up code will be called when interrupted by a signal.</p>\n<pre><code class=\"hljs hs\"><span class=\"hljs-import\"><span class=\"hljs-keyword\">import</span> System.Process <span class=\"hljs-container\">(<span class=\"hljs-title\">system</span>)</span></span>\n\n<span class=\"hljs-title\">main</span> :: <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-comment\">-- Hide the cursor</span>\n  system <span class=\"hljs-string\">\"tput civis\"</span>\n  <span class=\"hljs-comment\">-- Loop until interrupted</span>\n  loopUntilInterruption life glider\n  <span class=\"hljs-comment\">-- Show the cursor (the code will reach here now!)</span>\n  system <span class=\"hljs-string\">\"tput cvvis\"</span>\n  return ()\n\n<span class=\"hljs-title\">life</span> :: <span class=\"hljs-type\">Board</span> -&gt; <span class=\"hljs-type\">IO</span> <span class=\"hljs-type\">Board</span>\n<span class=\"hljs-title\">glider</span> :: <span class=\"hljs-type\">Board</span></code></pre><p>And they lived happily ever after.</p>\n"},{"layout":"post","title":"One-time binding for ng-if","date":"2016-04-05 23:58","comments":true,"categories":["JavaScript","AngularJS"],"url":"/blog/2016/04/05/one-time-binding-for-ng-if/","content":"<p>AngularJS&#39;s <a href=\"https://docs.angularjs.org/guide/expression#one-time-binding\">one-time binding</a> is useful to reduce the number of watches. It stops watching its expression once it becomes defined. It kindly keeps watching while the value is <code>undefined</code> for cases like asynchronous data fetching. But the kindness can be a pitfall especially for directives that take <code>boolean</code> expressions like <code>ng-if</code>.</p>\n<p>Here&#39;s an ordinary piece of AngularJS template. It shows &#39;Something&#39; when <code>obj.prop</code> exists.</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">ng-if</span>=<span class=\"hljs-value\">\"::obj.prop\"</span>&gt;</span>Something<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></code></pre><p>It works almost fine. But it keeps watching the expression when the message is hidden. Guess what?</p>\n<p>Yes! It keeps watching while the expression is <code>undefined</code>. Let&#39;s make sure that it&#39;s always <code>boolean</code>.</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">ng-if</span>=<span class=\"hljs-value\">\"::!!obj.prop\"</span>&gt;</span>Something<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></code></pre><p>Here we see the birth of a new operator <code>::!!</code>!</p>\n"}],"prevPage":"/blog/pages/2/","title":"Page 3 - Shuhei Kagawa","nextPage":"/blog/pages/4/"}