{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts"},"posts":[{"layout":"post","title":"Ruby の Curses で Hello, World!","published":true,"date":"2009-10-16 00:14","comments":true,"tags":null,"categories":[],"url":"/blog/2009/10/16/hello-world-with-curses-of-rub/","content":"<p>以前から wget の進行状況表示など、コマンドラインでアニメーションを表示するにはどうやってやるのか気になっていました。<br />\n<a href=\"http://www.tkl.iis.u-tokyo.ac.jp/~toyoda/\">sl コマンド</a> のソースを覗くと curse.h なるものを使っています。Ruby でもできるのかな？と思い、やってみました。<br />\n参考にしたのは <a href=\"http://codezine.jp/article/detail/2086\">RubyのCursesを使ってコンソールを制御する（1/2）：CodeZine</a> と <a href=\"http://www.ruby-lang.org/ja/man/html/curses.html\">curses &#8211; Rubyリファレンスマニュアル</a> 。</p>\n<pre class=\"prettyprint\">require 'curses'\n\nmessage = [\n  \"**   **  *******  **       **        *****    **\",\n  \"**   **  **       **       **       **   **   **\",\n  \"*******  *******  **       **       **   **   **\",\n  \"**   **  **       **       **       **   **     \",\n  \"**   **  *******  *******  *******   *****    **\"\n]\n\ndef animate(image)\n  include Curses\n  init_screen\n  y = ((lines - image.size) / 2).truncate\n  (cols - image[0].size).downto(1) do |t|\n    image.size.times do |i|\n      setpos(y + i, t)\n      addstr(image[i])\n    end\n    refresh\n    sleep(0.05)\n    clear\n  end\nclose_screen\nend\n\nanimate(message)</pre>\n<p>おおー、動きました。逆に新鮮で面白いですね。</p>"},{"layout":"post","title":"NTLM ハッシュ を求める","published":true,"date":"2009-10-13 21:18","comments":true,"tags":null,"categories":[],"url":"/blog/2009/10/13/ntlm-hash-with-ruby/","content":"<p>最近の Windows のパスワードの暗号化に使われているそうです。元の文字列をリトルエンディアンの <span class=\"caps\">UTF</span>-16 に符号化したものから <a href=\"http://en.wikipedia.org/wiki/MD4\"><span class=\"caps\">MD4</span></a> でハッシュを作成するのだとか。</p>\n<h3>Ruby で</h3>\n<p>16進数表現の文字列として出力します。もう少しうまい方法がある気がするのですが・・・。<br />\n<span class=\"caps\">NTLM</span> ハッシュの計算そのものは <a href=\"http://rubyforge.org/projects/rubyntlm/\">Ruby/<span class=\"caps\">NTLM</span></a> に頼っています。ちなみに Ruby/<span class=\"caps\">NTLM</span> をインストールするには、 <code>gem install rubyntlm</code> とします。</p>\n<pre class=\"prettyprint\">require 'rubygems'\nrequire 'net/ntlm'\n\ndef ntlm_hash16(password)\n  result = \"\"\n  hash = Net::NTLM.ntlm_hash(password)\n  hash.size.times do |i|\n    result += sprintf(\"%02x\", hash[i])\n  end\n  result\nend\n\nntlm_hash16(\"p@ssw0rd\")  #=&gt;  \"de26cce0356891a4a020e7c4957afc72\"</pre>\n<h4>追記</h4>\n<p><code>sprintf(\"%02x\", hash[i])</code> の部分を、最初は <code>hash[i].to_s(16)</code> と書いていました。しかし、これだと 15 以下の数が来たときに 0 が抜けてしまうので、修正しました。</p>\n<h3>Python で</h3>\n<p>ついでに Python でも。</p>\n<pre class=\"prettyprint\">import hashlib\ndef ntlm_hash16(password):\n  result = \"\"\n  digest = hashlib.new('md4', password.encode('utf-16le')).digest()\n  for ch in digest:\n    result += \"%02x\" % ord(ch)\n  return result\n\nntlm_hash16(\"p@ssw0rd\")  #=&gt;  'de26cce0356891a4a020e7c4957afc72'</pre>\n<p>Ruby でも Python でも、さすがに結果は同じようですね。</p>\n<h4>追記</h4>\n<p>Python でも Ruby と同じような間違いをしていました。<br />\n<code>\"%02x\" % ord(ch)</code> の部分を、最初は <code>hex(ord(ch))[2:]</code> と書いていました。<br />\nいやあ、テストは大事ですね。</p>"},{"layout":"post","title":"Booklog から本一覧を取得","published":true,"date":"2009-10-12 22:10","comments":true,"tags":null,"categories":[],"url":"/blog/2009/10/12/get-book-list-from-booklog/","content":"<p><a href=\"http://booklog.jp/\">web 本棚サービス ブクログ</a> がリニューアルしたというので <a href=\"http://www.booklog.jp/users/branchiopoda\">再開しました</a> 。ペパボの公式サービスとなり、メンテナンスやサービスの追加をどんどんやって行くそうです。<br />\n今回のリニューアルで一番うれしいのが、本の登録機能の強化です。</p>\n<blockquote>\n<p>ご要望で最も多かったものの一つが、もっと本を簡単に登録したい！ １冊１冊登録するのが面倒くさい！というものでした。 今回のリニューアルでは、 ページ遷移をせずに、簡単に複数の本を登録できるように改善しています。</p>\n<p><a href=\"http://info.booklog.jp/?eid=78\"><cite>ブクログがリニューアルいたしました。 | ブクログお知らせブログ</cite></a></p>\n</blockquote>\n<p>さくさく登録できて素晴らしいです。</p>\n<p>今のところ <span class=\"caps\">API</span> はないようで、何かをしたいときにはスクレイピングする必要があります。<br />\nとりあえず Ruby で本の一覧を取得してみました。</p>\n<pre class=\"prettyprint\">require 'rubygems'\nrequire 'hpricot'\nrequire 'open-uri'\n\nclass Book\n  def initialize(title, url)\n    @title = title\n    @url = url\n  end\n  def asin\n    @url.split(\"/\").last\n  end\n  attr_accessor :title, :url\nend\n\ndef get_books(username)\n  doc = Hpricot(open(\"http://www.booklog.jp/users/#{username}/All?display=list\"))\n  books = []\n  (doc/\"div#shelf div.list ul li\").each do |book|\n    title = (book/:a).first.inner_html\n    url = (book/:a).first[:href]\n    books.push(Book.new(title, url))\n  end\n  books\nend\n\nbooks = get_books(\"branchiopoda\")\nbooks.each do |book|\n  puts \"#{book.title} =&gt; #{book.asin}\"\nend</pre>\n<p>一覧から取れるのはタイトルと <span class=\"caps\">ASIN</span> コードだけなので、それ以上の情報を得るには、個別のページや Amazon の <span class=\"caps\">API</span> を見る必要がありますね。一つ一つ見てゆくのは大変ですし、情報の更新も行いたいので、今後の <span class=\"caps\">API</span> の公開に期待です。</p>"}],"prevPage":"/blog/pages/21/","title":"Page 22 - Shuhei Kagawa","nextPage":"/blog/pages/23/"}