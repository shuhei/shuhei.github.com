{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts","cssFiles":["node_modules/highlight.js/styles/monokai-sublime.css","source/_css/style.css"]},"posts":[{"layout":"post","title":"Python Challenge Lv. 6 - 7","published":true,"date":"2009-10-11 02:33","comments":true,"tags":null,"categories":[],"url":"/blog/2009/10/11/python-challenge-from-6-to-7/","content":"<p>システムアーキテクトの試験が来週末に迫っているのですが、またまたやってしまいました。現実逃避。<br />\n試験前ということを除けば、面白いし、自然と勉強になるので良いのですけどね。</p>\n<h3>Level 6</h3>\n<p>アドレスバーに何度も channel.zip と入れるも、ファイルがダウンロードされていることになかなか気付かず。気付いてファイルを解凍し、Level 4 的なプログラムで &#8220;Collect the comments.&#8221; に辿りつきましたが、意味がわかりません。<br />\n少しカンニングしてみると、<span class=\"caps\">ZIP</span> ファイルは中身のファイル毎にコメントを付けられるのだとか。Python の zipfile モジュールで見られるらしいので、やってみました。</p>\n<pre class=\"prettyprint\">num = \"90052\"\nz = zipfile.ZipFile(\"channel.zip\")\n\nwhile True:\n  # Print file's comment\n  print z.getinfo(num + \".txt\").comment,\n  # Get next nothing\n  s = open(num + \".txt\").read()\n  m = pattern.match(s)\n  if m:\n    num = m.group(1)\n  else:\n    break</pre>\n<p>Python で改行なしの出力をするには <code>print \"foo\",</code> なんですね。<br />\nいつのまにか Python で解いてしまってますね・・・。</p>\n<h3>Level 7</h3>\n<pre class=\"prettyprint\">from PIL import Image\nimage = Image.open(\"oxygen.png\")\nwidth = image.size[0]\ndata = list(image.getdata())\n\nbefore = 0\nmessage = \"\"\nfor x in range(width):\n  tmp = data[x + width * 46][0]\n  if tmp != before:\n    message += \"%c\" % (tmp)\n    before= tmp\n\nprint message</pre>\n<p>これで下記メッセージが表示されるのですが、この配列の意味がわかりません・・・。</p>\n<blockquote>\n<p>smart guy, you made it. the next level is [105, 10, 16, 101, 103, 14, 105, 16, 121]ljljlimkljhdfdcdfa]_a</p>\n</blockquote>\n<p>少しカンニングをして気がついたのですが、 <code>if tmp != before:</code> としているのがマズかったようです。これだと同じ文字が続く場合に無視されてしまいます。<br />\n気を取り直して以下。書き方も少し Python らしく（？）。<br />\n<code>chr</code> という関数があったんですね。</p>\n<pre class=\"prettyprint\">from PIL import Image\nimage = Image.open(\"oxygen.png\")\nwidth = image.size[0]\ndata = list(image.getdata())\nmessage = []\ni = 0\nwhile True:\n  color = data[i + width * 46]\n  if color[0] == color[1] == color[2]:\n    message.append(color[2])\n    i += 7\n  else:\n    break\n\nprint \"\".join(map(chr, message))</pre>\n<p>出てきたメッセージから答えを出します。</p>\n<pre class=\"prettyprint\">print \"\".join(map(chr, [105, 110, 116, 101, 103, 114, 105, 116, 121]))</pre>\n<p>何だかカンニングしてばかりですね・・・。</p>"},{"layout":"post","title":"草","published":true,"date":"2009-10-11 02:25","comments":true,"tags":null,"categories":[],"url":"/blog/2009/10/11/grasse/","content":"<p><a href=\"http://www.flickr.com/photos/branchiopoda/3998672572/\" title=\"Grasses.pde by shuhei kagawa, on Flickr\"><img src=\"http://farm3.static.flickr.com/2619/3998672572_f846cfe28f_o.png\" width=\"495\" height=\"140\" alt=\"Grasses.pde\" /></a></p>\n<p>パソコンの中にあったのを、絵作りのとこだけアップ。そういえば、何か作っていたのでした。<br />\n備忘のために。</p>\n<pre class=\"prettyprint\">int NUM;\nfloat[] grasses;\n\nvoid setup()\n{\n  size(495, 140);\n  smooth();\n  background(255);\n\n  NUM = width;\n\n  grasses = new float[NUM];\n  for (int i = 0; i &lt; NUM; i++)\n  {\n    grasses[i] = random(0, 1) * random(0.5, 1);\n  }\n  drawGrasses();\n  save(\"grasses.png\");\n}\n\nvoid drawGrasses()\n{\n  noFill();\n  colorMode(HSB);\n  for (int i = 0; i &lt; NUM; i++)\n  {\n    stroke(random(50, 100), 200, 200);\n    strokeWeight(width * 0.0015 * random(0.5, 1));\n\n    int x = i * width / (NUM - 1);\n    line(x,\n         height,\n         x + width * random(-0.1, 0.1) * random(-0.15, 0.15),\n         height * (1.0 - grasses[i] * 0.3 - 0.2));\n  }\n}\n</pre>"},{"layout":"post","title":"Python Challenge Lv. 0 - 5","published":true,"date":"2009-10-10 15:38","comments":true,"tags":null,"categories":[],"url":"/blog/2009/10/10/python-challenge-from-0-to-5/","content":"<p>ふと mixi の Python コミュニティを覗いたら <a href=\"http://www.pythonchallenge.com\">Python Challenge</a> なるものを発見。<br />\nプログラムを書いて解いてゆくクイズです。面白そうなのでやってみました。<br />\n最近マイブームな Ruby で。</p>\n<p>以下、ネタバレ注意です。</p>\n<h3>Level 0</h3>\n<pre class=\"prettyprint\">2 ** 38</pre>\n<h3>Level 1</h3>\n<pre class=\"prettyprint\">cipher = \"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.\"\nabc = (\"a\"[0] .. \"z\"[0]).to_a\ncde = (\"c\"[0] .. \"z\"[0]).to_a + [\"a\"[0], \"b\"[0]]\ndict = Hash[*abc.zip(cde).flatten]\ncipher.bytes do |ch|\n  ch = dict[ch] if dict.has_key?(ch)\n  printf(\"%c\", ch)\nend</pre>\n<h3>Level 2</h3>\n<p>ターミナルにコピペしたらおかしくなったので、一旦 mess_2.txt に保存。</p>\n<pre class=\"prettyprint\">File.open(\"mess_2.txt\") do |f|\n  while ch = f.getc\n    printf(\"%c\", ch) if (\"a\"[0] .. \"z\"[0]).include?(ch)\n  end\nend</pre>\n<p>ファイルの中身を1バイトずつ読み込んで、アルファベットだけ抜き出します。</p>\n<h3>Level 3</h3>\n<pre class=\"prettyprint\">pattern = /[^A-Z][A-Z]{3}([a-z])[A-Z]{3}[^A-Z]/\nFile.open(\"mess_3.txt\") do |f|\n  p f.read.scan(pattern).to_s\nend</pre>\n<p>Ruby でグローバルマッチしたい時って <code>String#scan</code> 使うしかないの？</p>\n<h3>Level 4</h3>\n<pre class=\"prettyprint\">num = \"12345\"\nrequire \"net/http\"\ndef get_nothing(num)\n  return Net::HTTP.get URI.parse(\"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=\" + num)\nend\n400.times do\n  content = get_nothing(num)\n  m = /and the next nothing is ([0-9]+)/.match(content)\n  p num\n  p content\n  if m != nil then\n    num = m[1]\n  else\n    exit\n  end\nend</pre>\n<p>途中でひっかけがありますが・・・。そこは手作業で。</p>\n<h3>Level 5</h3>\n<p>意味がわからずカンニング。<br />\n<a href=\"http://unixwars.com/2007/09/11/python-challenge-level-5-peak-hell/?wscr=1280x800\">Python Challenge level 5: “peak hell” | UnixWars</a><br />\nPython の Pickle モジュールを使う問題だとか。知らんがな。</p>\n<pre class=\"prettyprint\">import urllib, pickle\nuri = \"http://www.pythonchallenge.com/pc/def/banner.p\"\nobj = pickle.load(urllib.urlopen(uri))\nfor line in obj:\n  l = \"\"\n  for pair in line:\n    l += pair[0] * pair[1]\n    print l</pre>\n<h3>今日はここまで</h3>\n<p>続きはまた今度。</p>"}],"prevPage":"/blog/pages/23/","title":"Page 24 - Shuhei Kagawa","nextPage":"/blog/pages/25/"}