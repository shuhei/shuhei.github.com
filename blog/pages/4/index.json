{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts"},"posts":[{"layout":"post","title":"Algorithms: Design and Analysis, Part 1","date":"2015-11-29 23:35","comments":true,"categories":["Algorithms"],"url":"/blog/2015/11/29/algorithms-part-1/","content":"<p>Today I finished the final exam of Stanford&#39;s <a href=\"https://www.coursera.org/course/algo\">&quot;Algorithms: Design and Analysis, Part 1&quot;</a> at Coursera. I solved all its programming assignments with JavaScript and put the solutions at GitHub:</p>\n<ul>\n<li><a href=\"https://github.com/shuhei/algo\">shuhei/algo</a></li>\n</ul>\n<p>The course focused on fundamental algorithms and their analysis. What I learned so far were:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Divide_and_conquer_algorithms\">Divide-and-conquer algorithms</a> and analysis with <a href=\"https://en.wikipedia.org/wiki/Master_theorem\">Master Method</a>: <a href=\"https://en.wikipedia.org/wiki/Merge_sort\">merge sort</a> and <a href=\"https://en.wikipedia.org/wiki/Quicksort\">quick sort</a></li>\n<li>Graph algorithms: <a href=\"https://en.wikipedia.org/wiki/Minimum_cut\">minimum cut</a>, <a href=\"https://en.wikipedia.org/wiki/Depth-first_search\">depth-first</a> and <a href=\"https://en.wikipedia.org/wiki/Breadth-first_search\">breadth-first</a> search, <a href=\"https://en.wikipedia.org/wiki/Strongly_connected_component\">strongly connected components</a>, <a href=\"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\">Dijkstra&#39;s shortest-path</a></li>\n<li>Data structures: <a href=\"https://en.wikipedia.org/wiki/Heap_(data_structure\">heaps</a>, <a href=\"https://en.wikipedia.org/wiki/Hash_table\">hash tables</a> and <a href=\"https://en.wikipedia.org/wiki/Binary_search_tree\">binary search trees</a></li>\n</ul>\n<p>As a self-taught programmer, I had been away from formal Computer Science topics like big O notation. But after I learned <a href=\"https://www.coursera.org/learn/machine-learning\">Machine Learning</a> and tried to implement some ML algorithms for large datasets a few months ago, I noticed that I needed some knowledge of basic algorithms and mathematical analysis of them.</p>\n<p>The Algorithms course focused not only on algorithms themselves but also on their performance analysis and mathematical proofs. The analysis and proofs are crucial especially for the cases when we design custom algorithms for real-world problems in the future, and more importantly made me more confident about the algorithms.</p>\n<p>Another good side effect of the course was that I got interested in Mathematics. Through the course and a study meetings on <a href=\"https://mitpress.mit.edu/sicp/\">SICP</a> with my co-workers, I noticed that Mathematics is interesting but I lacked some prerequisites to understand it. At the moment, I came across <a href=\"http://www.amazon.com/Introduction-Mathematical-Thinking-Keith-Devlin/dp/0615653634\">Introduction to Mathematical Thinking</a> by Keith Devlin. It was written to fill the gap between the school math, which focuses following given procedures, and the college math, which focuses on thinking. It is perfect for someone like me, who skipped proper Mathematics training at college. I am still on the way reading it but it already started working on my analysis of the SICP exercises.</p>\n<p><a href=\"https://www.coursera.org/course/algo2\">The part 2 of the course</a> will start probably on March 2016. I cannot wait for it to start and get my eyes open again.</p>\n"},{"layout":"post","title":"Node.js executable module","date":"2015-10-25 22:42","comments":true,"categories":["JavaScript"],"url":"/blog/2015/10/25/node-executable-module/","content":"<p>You may want to create a Node module that is also an executable. The convention is to create two files, one for lib and the other for bin, but I think it&#39;s OK for simple modules.</p>\n<p>To achieve it, you need to detect whether it&#39;s executed as an entry point. According to <a href=\"https://nodejs.org/api/modules.html#modules_accessing_the_main_module\">the official documentation of Node</a>:</p>\n<blockquote>\n<p>When a file is run directly from Node.js, <code>require.main</code> is set to its module. That means that you can determine whether a file has been run directly by testing</p>\n<pre><code class=\"hljs undefined\">require.main === module</code></pre></blockquote>\n<p>For example:</p>\n<pre><code class=\"hljs js\">#!/usr/bin/env node\n\nfunction sum(a, b) {\n  return a + b;\n}\n\nmodule.exports = sum;\n\nif (require.main === module) {\n  var a = parseInt(process.argv[2], 10);\n  var b = parseInt(process.argv[3], 10);\n  console.log(sum(a, b));\n}</code></pre><p>Then you can use it as an executable and a module.</p>\n<pre><code class=\"hljs sh\">$ node sum.js <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">7</span>\n$ node\n&gt; require(<span class=\"hljs-string\">'./sum'</span>)(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)\n<span class=\"hljs-number\">7</span></code></pre>"},{"layout":"post","title":"Color prompt by exit code","date":"2015-10-18 19:11","comments":true,"categories":["Bash"],"url":"/blog/2015/10/18/color-prompt-by-exit-code/","content":"<p>The idea of customizing bash prompt hooked me a few months ago. I tried a few crazy things like <a href=\"https://github.com/shuhei/dotfiles/commit/a45d8c88d4c02737dad397b56624895bb715f5b5\">showing random emojis</a> and finally settled down with just showing the current directory, git branch and status.</p>\n<p>At <a href=\"http://nodejs.connpass.com/event/20646/\">Tokyo Node Gakuen #18</a> on October 8th, <a href=\"https://twitter.com/yosuke_furukawa\">@yosuke_furukawa</a> <a href=\"https://speakerdeck.com/yosuke_furukawa/node-dot-js-v4-falsehua-number-tng18\">talked about Node.js v4.0</a>. Aside from the well-organized and informative talk, I found another interesting thing at his demo. His terminal prompt <em>turned red when a command failed</em>.</p>\n<p>It looked pretty and useful. So I emulated it.</p>\n<p><img src=\"/images/prompt-exit-code.gif\" alt=\"Changing prompt color \"></p>\n<p>The code in <code>.bash_profile</code> is pretty straightforward. It changes the prompt color depending on whether the exit code is 0 or not. The only one trick is to capture the exit code at the very first line of the prompt command to prevent it from being changed in prior lines.</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># Colors</span>\nlight_green=<span class=\"hljs-string\">\"\\[\\e[1;32m\\]\"</span>\nlight_red=<span class=\"hljs-string\">\"\\[\\e[1;31m\\]\"</span>\nyellow=<span class=\"hljs-string\">\"\\[\\e[0;33m\\]\"</span>\ngray=<span class=\"hljs-string\">\"\\[\\e[0;37m\\]\"</span>\nreset=<span class=\"hljs-string\">\"\\[\\e[m\\]\"</span>\n\n<span class=\"hljs-comment\"># Customize prompt</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">prompt_command</span></span>() {\n  <span class=\"hljs-built_in\">local</span> status=<span class=\"hljs-string\">\"$?\"</span>\n  <span class=\"hljs-built_in\">local</span> status_color=<span class=\"hljs-string\">\"\"</span>\n  <span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-variable\">$status</span> != <span class=\"hljs-number\">0</span> ]; <span class=\"hljs-keyword\">then</span>\n    status_color=<span class=\"hljs-variable\">$light_red</span>\n  <span class=\"hljs-keyword\">else</span>\n    status_color=<span class=\"hljs-variable\">$light_green</span>\n  <span class=\"hljs-keyword\">fi</span>\n  <span class=\"hljs-built_in\">export</span> PS1=<span class=\"hljs-string\">\"[<span class=\"hljs-variable\">${yellow}</span>\\w<span class=\"hljs-variable\">${reset}</span>]<span class=\"hljs-variable\">${gray}</span><span class=\"hljs-variable\">$(__git_ps1)</span><span class=\"hljs-variable\">${reset}</span> <span class=\"hljs-variable\">${status_color}</span>Î»<span class=\"hljs-variable\">${reset}</span> \"</span>\n}\n<span class=\"hljs-built_in\">export</span> GIT_PS1_SHOWDIRTYSTATE=<span class=\"hljs-number\">1</span>\n<span class=\"hljs-built_in\">export</span> PROMPT_COMMAND=prompt_commandsh</code></pre><p>One of the advantages of attending real events over just browsing slides online is being able to take a peek of other people&#39;s dev environments. Looking forward to seeing more cool stuff on upcoming events like <a href=\"http://nodefest.jp/2015/\">Tokyo Node Fest 2015</a>.</p>\n"}],"prevPage":"/blog/pages/3/","title":"Page 4 - Shuhei Kagawa","nextPage":"/blog/pages/5/"}