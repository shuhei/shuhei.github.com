{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts"},"posts":[{"layout":"post","title":"ActiveLdap 調査メモ","published":true,"date":"2010-03-06 19:56","comments":true,"tags":null,"categories":[],"url":"/blog/2010/03/06/servey-note-ofactiveldap/","content":"<p>未検証ですが、以下の記事から調査したことのメモ。</p>\n<ul>\n\t<li><a href=\"http://jp.rubyist.net/magazine/?0027-ActiveLdap\">Rubyist Magazine &#8211; ActiveLdap を使ってみよう（前編）</a></li>\n\t<li><a href=\"http://www.clear-code.com/archives/rails-seminar-technical-night\">Railsで作るActive Directoryと連携した社内システム</a></li>\n</ul>\n<h3>Rails と併用可</h3>\n<pre class=\"prettyprint\">script/generate scaffold_active_ldap\nscript/generete model_active_ldap user</pre>\n<h3>接続</h3>\n<p>接続はプロセス間共有不可。普通にやると、Passenger はだめ。</p>\n<h4>対策</h4>\n<ul>\n\t<li>ユーザ毎の接続を持たせない。</li>\n\t<li>1 リクエストで完結させる。</li>\n</ul>\n<h3>バックエンド</h3>\n<ul>\n\t<li>Ruby なら Ruby/<span class=\"caps\">LDAP</span>（OpenLDAP のバインディング）。</li>\n\t<li>JRuby なら <span class=\"caps\">JNDI</span>。</li>\n\t<li>PureRuby の Net::LDAP は、trunk でないと問題。</li>\n</ul>"},{"layout":"post","title":"Ruby の環境を新しく","published":true,"date":"2010-03-06 19:54","comments":true,"tags":null,"categories":null,"url":"/blog/2010/03/06/renew-ruby-environment/","content":"<p>家の Macbook と Ubuntu で Ruby 周りのバージョンを揃えた時のメモ。<br />\n以下の環境に揃えました。</p>\n<ul>\n\t<li>Ruby 1.8.7</li>\n\t<li>Ruby Gems 1.3.5（Macbook は1.3.4）</li>\n\t<li>Rails 2.3.5</li>\n</ul>\n<h3>Ubuntu Server 9.10 64 bit</h3>\n<p>Ruby はもともと 1.8.7。RubyGems も 1.3.5。<br />\n入っている Rails のバージョンを上げる。Aptitude で入れると古いので、RubyGems を使う事に。</p>\n<pre class=\"prettyprint\">sudo aptitude remove rails\nsudo gem install rails\nsudo gem install sqlite3-ruby\n\nvi ~/.bashrc\nexport PATH=/var/lib/gem/1.8/bin:$PATH</pre>\n<h3>Mac OS X</h3>\n<p>もともと入っている Ruby が 1.8.6 なので、1.8.7 を入れます。</p>\n<pre class=\"prettyprint\">sudo port install ruby</pre>\n<p>RubyGems も MacPorts から。1.3.4 なのは我慢。</p>\n<pre class=\"prettyprint\">sudo port install rb-rubygems</pre>"},{"layout":"post","title":"rails.vim","published":true,"date":"2010-03-01 08:40","comments":true,"tags":null,"categories":[],"url":"/blog/2010/03/01/rails-vim/","content":"<p><a href=\"http://www.vim.org/scripts/script.php?script_id=1567\">rails.vim &#8211; Ruby on Rails: easy file navigation, enhanced syntax highlighting, and more : vim online</a> がステキ。<br />\nダウンロードして、.vim に入れればインストール完了。</p>\n<h3>ファイル間の移動</h3>\n<p>対応するモデルと単体テスト、コントローラとビューと機能テストの間などを行き来できます。</p>\n<ul>\n\t<li>:Rmodel</li>\n\t<li>:Runittest</li>\n\t<li>:Rcontroller</li>\n\t<li>:Rview</li>\n\t<li>:Rfunctinaltest</li>\n</ul>\n<p>などなど。対応するファイルに飛ぶだけでなく、以下のような感じでパスの指定もできます。</p>\n<p>:Rmodel user<br />\n:Rview users/show</p>\n<p>Tabキーで補完が効くので、大変便利。</p>\n<h3>サーバの起動</h3>\n<p><code>:Rserver</code> とするとコマンドプロンプトが別に開き、サーバが起動されます。</p>\n<h3>Rake の実行</h3>\n<p><code>:Rake task_name</code> で Rake タスクが実行できます。<br />\n例えば単体テストの実行には <code>:Rake test:units</code> 。</p>\n<p>結果はエラーとして出力されるため <code>:cl</code> で確認可能。</p>\n<p>タスク名の補完もきくので、ターミナルより便利！</p>\n<h3>参考<span class=\"caps\">URL</span></h3>\n<ul>\n\t<li><a href=\"http://d.hatena.ne.jp/secondlife/20061222/1166781841\">rails.vim まとめ &#8211; 川o・-・）＜2nd life</a></li>\n\t<li><a href=\"http://d.hatena.ne.jp/mig50/20060731/1154356587\">rails.vimの使い方(導入編) &#8211; migration!!</a></li>\n</ul>"}],"prevPage":"/blog/pages/15/","title":"Page 16 - Shuhei Kagawa","nextPage":"/blog/pages/17/"}