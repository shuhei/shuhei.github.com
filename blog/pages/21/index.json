{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts"},"posts":[{"layout":"post","title":"git をインストール","published":true,"date":"2009-10-19 16:49","comments":true,"tags":null,"categories":[],"url":"/blog/2009/10/19/install-git/","content":"<p>会社では構成管理に Subversion を使っています。<br />\n特に困っていることもないのですが、見識を広めるため家の MacBook に git を入れてみました。</p>\n<p><a href=\"http://code.google.com/p/git-osx-installer/\">インストーラ</a> もあるようですが、管理が楽そうな MacPorts を使用。</p>\n<pre class=\"prettyprint\">port search git</pre>\n<p>いろいろ出てきますが、git-core だけでよさそうです。</p>\n<pre class=\"prettyprint\">port variants git-core</pre>\n<p>でオプションが出てきます。<br />\n全部入りにしてみました。</p>\n<pre class=\"prettyprint\">sudo port install git-core +doc +gitweb +svn +bash_completion</pre>\n<p>何だか Perl5 のライブラリがたくさん入りました。<br />\nbash 補完は以下を.profileに貼付けると良いとのこと。</p>\n<pre class=\"prettyprint\">if [ -f /opt/local/etc/bash_completion ]; then\n  . /opt/local/etc/bash_completion\nfi</pre>\n<p>その後 <a href=\"http://www8.atwiki.jp/git_jp/pub/git-manual-jp/Documentation/gittutorial.html\">チュートリアル</a> を読んでいろいろ試してみました。branch が機能として統合されているのがいいですね。<br />\nbranch については <a href=\"http://d.hatena.ne.jp/zariganitosh/20080912/1221260782\">アリスがチャレンジなコードを書く時、git branchをちゃんと理解したい！ &#8211; ザリガニが見ていた&#8230;。</a> がとても参考になりました。</p>"},{"layout":"post","title":"Ruby の Curses で Hello, World!","published":true,"date":"2009-10-16 00:14","comments":true,"tags":null,"categories":[],"url":"/blog/2009/10/16/hello-world-with-curses-of-rub/","content":"<p>以前から wget の進行状況表示など、コマンドラインでアニメーションを表示するにはどうやってやるのか気になっていました。<br />\n<a href=\"http://www.tkl.iis.u-tokyo.ac.jp/~toyoda/\">sl コマンド</a> のソースを覗くと curse.h なるものを使っています。Ruby でもできるのかな？と思い、やってみました。<br />\n参考にしたのは <a href=\"http://codezine.jp/article/detail/2086\">RubyのCursesを使ってコンソールを制御する（1/2）：CodeZine</a> と <a href=\"http://www.ruby-lang.org/ja/man/html/curses.html\">curses &#8211; Rubyリファレンスマニュアル</a> 。</p>\n<pre class=\"prettyprint\">require 'curses'\n\nmessage = [\n  \"**   **  *******  **       **        *****    **\",\n  \"**   **  **       **       **       **   **   **\",\n  \"*******  *******  **       **       **   **   **\",\n  \"**   **  **       **       **       **   **     \",\n  \"**   **  *******  *******  *******   *****    **\"\n]\n\ndef animate(image)\n  include Curses\n  init_screen\n  y = ((lines - image.size) / 2).truncate\n  (cols - image[0].size).downto(1) do |t|\n    image.size.times do |i|\n      setpos(y + i, t)\n      addstr(image[i])\n    end\n    refresh\n    sleep(0.05)\n    clear\n  end\nclose_screen\nend\n\nanimate(message)</pre>\n<p>おおー、動きました。逆に新鮮で面白いですね。</p>"},{"layout":"post","title":"NTLM ハッシュ を求める","published":true,"date":"2009-10-13 21:18","comments":true,"tags":null,"categories":[],"url":"/blog/2009/10/13/ntlm-hash-with-ruby/","content":"<p>最近の Windows のパスワードの暗号化に使われているそうです。元の文字列をリトルエンディアンの <span class=\"caps\">UTF</span>-16 に符号化したものから <a href=\"http://en.wikipedia.org/wiki/MD4\"><span class=\"caps\">MD4</span></a> でハッシュを作成するのだとか。</p>\n<h3>Ruby で</h3>\n<p>16進数表現の文字列として出力します。もう少しうまい方法がある気がするのですが・・・。<br />\n<span class=\"caps\">NTLM</span> ハッシュの計算そのものは <a href=\"http://rubyforge.org/projects/rubyntlm/\">Ruby/<span class=\"caps\">NTLM</span></a> に頼っています。ちなみに Ruby/<span class=\"caps\">NTLM</span> をインストールするには、 <code>gem install rubyntlm</code> とします。</p>\n<pre class=\"prettyprint\">require 'rubygems'\nrequire 'net/ntlm'\n\ndef ntlm_hash16(password)\n  result = \"\"\n  hash = Net::NTLM.ntlm_hash(password)\n  hash.size.times do |i|\n    result += sprintf(\"%02x\", hash[i])\n  end\n  result\nend\n\nntlm_hash16(\"p@ssw0rd\")  #=&gt;  \"de26cce0356891a4a020e7c4957afc72\"</pre>\n<h4>追記</h4>\n<p><code>sprintf(\"%02x\", hash[i])</code> の部分を、最初は <code>hash[i].to_s(16)</code> と書いていました。しかし、これだと 15 以下の数が来たときに 0 が抜けてしまうので、修正しました。</p>\n<h3>Python で</h3>\n<p>ついでに Python でも。</p>\n<pre class=\"prettyprint\">import hashlib\ndef ntlm_hash16(password):\n  result = \"\"\n  digest = hashlib.new('md4', password.encode('utf-16le')).digest()\n  for ch in digest:\n    result += \"%02x\" % ord(ch)\n  return result\n\nntlm_hash16(\"p@ssw0rd\")  #=&gt;  'de26cce0356891a4a020e7c4957afc72'</pre>\n<p>Ruby でも Python でも、さすがに結果は同じようですね。</p>\n<h4>追記</h4>\n<p>Python でも Ruby と同じような間違いをしていました。<br />\n<code>\"%02x\" % ord(ch)</code> の部分を、最初は <code>hex(ord(ch))[2:]</code> と書いていました。<br />\nいやあ、テストは大事ですね。</p>"}],"prevPage":"/blog/pages/20/","title":"Page 21 - Shuhei Kagawa","nextPage":"/blog/pages/22/"}