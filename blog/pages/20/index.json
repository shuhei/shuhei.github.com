{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts"},"posts":[{"layout":"post","title":"Xcode で例外発生時のスタックトレースをデバッガに表示","published":true,"date":"2009-11-14 10:07","comments":true,"tags":null,"categories":[],"url":"/blog/2009/11/14/show-stacktrace-of-exception-on-xcode/","content":"<p>iPhone アプリの開発で例外が発生したとき、Xcode のコンソールにはスタックトレースのアドレス（？）が表示されるだけで、内容がわかりません。<br />\nObjective-C ランタイムの例外送出部分にブレークポイントを設定することで、例外発生時のスタックトレースやコード中のオブジェクトの値をデバッガで詳しく見ることができます。</p>\n<h3>方法</h3>\n<p>&#8220;実行&#8221; =&gt; &#8220;ブレークポイントを管理&#8221; =&gt; &#8220;シンボリックブレークポイントを追加&#8221; を実行します。</p>\n<p><img src=\"/images/2009/11/symbolic_break_point1.png\" alt=\"\" /></p>\n<p>出てきたダイアログに <code>objc_exception_throw</code> と入力。<br />\nこれで、例外が発生した時にブレークされ、デバッガで詳細を見る事ができるようになります。</p>\n<p><img src=\"/images/2009/11/debugger1.png\" alt=\"\" /></p>\n<p>デバッガなので、もちろんコード中のオブジェクトの値を見ることもできます。便利ですね。</p>\n<p>via <a href=\"http://www.markj.net/debugging-tip-objc_exception_throw-breakpoint/\">Debugging Tip – objc_exception_throw breakpoint | markjnet</a></p>\n<h3>シンボリックブレークポイント</h3>\n<p>通常のブレークポイントではソースコード中の行を指定しますが、シンボリックブレークポイントはシンボル単位で指定するブレークポイントです。<br />\nですので「あの関数が呼ばれたらブレーク」や「あのクラスのあのメソッドが呼ばれたらブレーク」ということができます。<br />\n今回の objc_exception_throw は Objective-C のランタイム中にある例外を送出する関数のようですね。</p>"},{"layout":"post","title":"Navigation-based Application に TabBar を追加","published":true,"date":"2009-11-07 17:53","comments":true,"tags":null,"categories":[],"url":"/blog/2009/11/07/add-tabbar-to-navigation-based-application-project/","content":"<p>iPhone プロジェクトの新規作成時に &#8220;Navigation-based Application&#8221; を選んだ場合に、後から TabBar を追加する方法です。<br />\nInterfaceBuilder での設定が画像入りの説明なしではよくわからず、苦戦したのでメモしておきます。</p>\n<h3>InterfaceBuilder の設定</h3>\n<h4>Tab Bar Controller の追加</h4>\n<p>まず、InterfaceBuilder で MainWindow.xib を開きます。<br />\nNavigation Controller を削除して Tab Bar Controller を追加します。</p>\n<h4>Tab Bar Controller の下に Navigation Controller を</h4>\n<p>Tab Bar Controller にフォーカスをあて、Inspector の一番左のタブ の &#8220;Tab Bar Controller&#8221; =&gt; &#8220;View Controllers&#8221; の中で Navigation Controller にするタブの Class を Navigation Controller に変更します。</p>\n<p><img src=\"/images/2009/11/TabBarController_Inspector1.png\" alt=\"\" /></p>\n<p>すると、IB のメインウィンドウの方の Tab Bar Controller の子供の Controller の Type が UIViewController から UINavigationController に変わっているはずです。</p>\n<h4>Navigation Controller の下に Root View Controller を</h4>\n<p>この Navigation Controller のさらに子供の View Controller が、もともとの Root View Controller になるよう設定します。<br />\n一番左側のタブで <span class=\"caps\">NIB</span> Name を、Inspectorで一番右側のタブで Class を設定します。</p>\n<p><img src=\"/images/2009/11/SetRootViewControllerNIB1.png\" alt=\"\" /><br />\n<img src=\"/images/2009/11/SetRootViewControllerClass1.png\" alt=\"\" /></p>\n<p>以上を保存して IB を閉じます。</p>\n<h3>コードの修正</h3>\n<p>Xcode に戻って AppDelegate を変更し、UINavigationController ではなく UITabBarController を読み込むようにします。<br />\n以下、アプリケーションの名前を Hoge だったとして、 HogeAppDelegate.h と .m を編集します。</p>\n<h4>HogeDelegate.h</h4>\n<pre class=\"prettyprint\">@interface HogeAppDelegate : NSObject  {\n  UIWindow *window;\n  UITabBarController *tabBarController;\n}\n\n@property (nonatomic, retain) IBOutlet UIWindow *window;\n@property (nonatomic, retain) IBOutlet UITabBarController *tabBarController;\n\n@end</pre>\n<h4>HogeAppDelegate.m</h4>\n<pre class=\"prettyprint\">- (void)applicationDidFinishLaunching:(UIApplication *)application {\n  [window addSubview:[tabBarController view]];\n  [window makeKeyAndVisible];\n}</pre>\n<p><code>synsthesize</code> と <code>dealloc</code> 中の <code>release</code> も忘れずに変更します。</p>\n<h3>App Delegate の Outlet のつなぎ変え</h3>\n<p>これまで App Delegate で UINavigationController を参照していたのを UITabBarController に変えたので、Outlet の設定が切れています。<br />\n再度 Interface Builder に戻って App Delegate の Outlet をつなぎ直します。</p>\n<p>これで、Tab Bar Controller の下に Navigation Controller と View Controller、Navigation Controller の下に Root View Controller という構成になっているはずです。</p>"},{"layout":"post","title":"ImageMagick で画像を一括リサイズ","published":true,"date":"2009-11-07 15:41","comments":true,"tags":null,"categories":[],"url":"/blog/2009/11/07/resize-images-with-imagemagick/","content":"<p>特定の名前の画像をリサイズします。</p>\n<pre class=\"prettyprint\">#! /bin/bash\n\nfor f in rect_*.png;\ndo\n  convert -resize 12x12! $f $f\ndone</pre>\n<p>コマンドラインは便利ですねー。<br />\nひまを見てちょこちょこシェルスクリプトを勉強していきたいです。</p>"}],"prevPage":"/blog/pages/19/","title":"Page 20 - Shuhei Kagawa","nextPage":"/blog/pages/21/"}