{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts","cssFiles":["node_modules/highlight.js/styles/monokai-sublime.css","source/_css/style.css"]},"posts":[{"layout":"post","title":"Flash Platform Camp Tokyo を見てきた","published":true,"date":"2010-03-16 23:02","comments":true,"tags":null,"categories":[],"url":"/blog/2010/03/16/flash-platform-camp-tokyo/","content":"<p>今日 Flash Platform Camp Tokyo に行ってきました。<br />\nFlash <span class=\"caps\">CS5</span>、Flash Player 10.1、<span class=\"caps\">AIR2</span>.0 の新機能紹介や、Ralph Hauwert, Mario Klingemann, 深津さん、新藤さん、Erik Natzke らのセッション。</p>\n<p>（内容まとめ。あとで書く）</p>\n<p>最近開発プロセスやアプリケーション設計、プログラミング言語そのものなど、いわば How の方に興味が移っていました。<br />\n会社で What を選びにくい状況で、ついついそうなってしまっていたのかもしれません。<br />\nしかし、今回のイベントでやはり How より What の方が面白いと再確認。とにかく何かを作ることを忘れないようにしようと思いました。</p>\n<p>こういう普段と違う世界を見るのは、自分を遠くから見る良いきっかけになりますね。今後も面白そうなものを見つけて参加していきたいです。</p>"},{"layout":"post","title":"SSH を安全に","published":true,"date":"2010-03-15 15:32","comments":true,"tags":null,"categories":[],"url":"/blog/2010/03/15/secure-ssh/","content":"<p>自宅サーバの <span class=\"caps\">SSH</span> を外から使えるようにするにあたり、セキュリティ対策を施してみました。</p>\n<p>鍵認証のところ以外は <a href=\"http://www.unixuser.org/~euske/doc/openssh/jman/sshd_config.html\" title=\"5\">SSHD_<span class=\"caps\">CONFIG</span></a> 参照。<br />\n下記設定をして ufw とルータの設定を変えたら、今のところそれらしく動いてます。</p>\n<h3>パスワードではなく鍵認証に</h3>\n<p>クライアントで鍵を作って、サーバに公開鍵を置いておきます。クライアントが秘密鍵を持っていないと認証できないように設定。<br />\n念のためパスワードもかけておきました。</p>\n<p>via <a href=\"http://www.turbolinux.co.jp/support/document/knowledge/152.html\">ssh にてパスワードを使用しないでログインする方法</a></p>\n<h3>ポートを変更</h3>\n<p>22 番ポートはいろんなところから攻撃されるということなので。</p>\n<h3>ログインユーザの制限</h3>\n<p>そんなにいろんなユーザ作ってませんが、念のため。</p>\n<h3>ルートログインの禁止</h3>\n<p>root ログインはユーザ名がばれているため禁止。使わないし。</p>\n<h3>試行回数の制限</h3>\n<p>鍵認証の場合はあまり関係ないかな？</p>"},{"layout":"post","title":"Git + Redmine","published":true,"date":"2010-03-13 13:50","comments":true,"tags":null,"categories":[],"url":"/blog/2010/03/13/redmine-with-git/","content":"<p>自宅サーバに入れた Redmine から Git レポジトリを参照できるように設定してみました。</p>\n<h3>サーバにリポジトリを作成</h3>\n<p>Redmine を置いているサーバに空のリポジトリを作ります。</p>\n<pre class=\"prettyprint\">server$ mkdir myapp.git\nserver$ cd myapp.git\nserver$ git --bare init</pre>\n<h3>リモートリポジトリとして登録</h3>\n<p>ローカルのレポジトリにサーバのリポジトリを登録。Push します。</p>\n<pre class=\"prettyprint\">local$ git remote add origin ssh://username@example.com/path/to/myapp.git\nlocal$ git push origin master</pre>\n<h3>Redmine の設定</h3>\n<p>プロジェクトの「設定」 =&gt; 「リポジトリ」で以下のように設定。</p>\n<ul>\n\t<li>バージョン管理システム =&gt; Git</li>\n\t<li>Path to .git directory =&gt; /path/to/myapp.git</li>\n</ul>\n<p>以上で終了です。<br />\nプロジェクトの「リポジトリ」を確認すると、おお、見えました。<br />\nブラウザで見るとぐちゃぐちゃなのがよくわかります・・・。</p>\n<h3>チケットとコミットの連携</h3>\n<p>コミットメッセージに Redmine のチケット ID を含めることで、チケットとコミットの関連付けが行えます。<br />\nチケット ID 前のキーワードによって、関連付けの仕方を変えることができます。デフォルトでは refs で単純な参照、 fixes で進捗率 100% にするようになっているようです。<br />\n管理  =&gt; 設定 =&gt; リポジトリ で確認、設定できます。</p>\n<h3>参考 <span class=\"caps\">URL</span></h3>\n<ul>\n\t<li><a href=\"http://blog.champierre.com/archives/670\">せっかちな人のための git 入門 &#8211; git をインストールし、共同で開発できる環境を整えるまで : 僕は発展途上技術者</a></li>\n\t<li><a href=\"http://d.hatena.ne.jp/ntaku/20090526/1243327903\">RedmineとGitで作るプロジェクト開発環境 &#8211; プログラミングノート</a></li>\n</ul>"}],"prevPage":"/blog/pages/14/","title":"Page 15 - Shuhei Kagawa","nextPage":"/blog/pages/16/"}