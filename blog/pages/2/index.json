{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts","cssFiles":["node_modules/highlight.js/styles/monokai-sublime.css","source/_css/style.css"]},"posts":[{"layout":"post","title":"main, jsnext:main and module","date":"2017-01-05 00:00","comments":true,"categories":["JavaScript"],"url":"/blog/2017/01/05/main-jsnext-main-and-module/","content":"<p>Node module&#39;s <code>package.json</code> has <code>main</code> property. It&#39;s the entry point of a package, which is exported when a client <code>require</code>s the package.</p>\n<p>Recently, I got <a href=\"https://github.com/shuhei/material-colors/issues/13\">an issue</a> on one of my popular GitHub repos, <code>material-colors</code>. It claimed that &quot;colors.es2015.js const not supported in older browser (Safari 9)&quot;, which looked pretty obvious to me. ES2015 is a new spec. Why do older browsers support it?</p>\n<p>I totally forgot about it at the time, but <a href=\"https://github.com/shuhei/material-colors/pull/10\">the <code>colors.es2015.js</code> was exposed as the npm package&#39;s <code>jsnext:main</code></a>. And to my surprise, it turned out that <strong><code>jsnext:main</code> shouldn&#39;t have <em>jsnext</em> or ES2015+ features</strong> like <code>const</code>, arrow function and <code>class</code>. What a contradiction!</p>\n<h2 id=\"jsnext-main\">jsnext:main</h2>\n<p>Module bundlers that utilizes tree shaking to reduce bundle size, like Rollup and Webpack 2, require packages to expose ES Modules with <code>import</code> and <code>export</code>. So they invented a non-standard property called <code>jsnext:main</code>.</p>\n<p>However, it had a problem. If the file specified <code>jsnext:main</code> contains ES2015+ features, it won&#39;t run without transpilation on browsers that don&#39;t support those features. But normally people don&#39;t transpile packages in <code>node_modules</code>, and many issues were created on GitHub. To solve the problem, people concluded that <code>jsnext:main</code> shouldn&#39;t have ES2015+ features other than <code>import</code> and <code>export</code>. What an irony.</p>\n<h2 id=\"module\">module</h2>\n<p>Now the name <code>jsnext:main</code> is too confusing. I was confused at least. People discussed for a better name, and <a href=\"https://github.com/rollup/rollup/wiki/pkg.module\"><code>module</code></a> came out that <a href=\"https://github.com/rollup/rollup/wiki/jsnext:main\">supersedes <code>jsnext:main</code></a>. And <a href=\"https://nodesource.com/blog/es-modules-and-node-js-hard-choices/\">it might be standardized</a>.</p>\n<h2 id=\"so-\">So?</h2>\n<p>I looked into a couple of popular repos, and they had both of <code>jsnext:main</code> and <code>module</code> in addition to <code>main</code>.</p>\n<ul>\n<li><a href=\"https://github.com/reactjs/redux/blob/master/package.json\">redux</a></li>\n<li><a href=\"https://github.com/mrdoob/three.js/blob/dev/package.json\">three.js</a></li>\n</ul>\n<p>At this time, it seems to be a good idea to have both of them if you want to support tree shaking. If you don&#39;t, just go with only the plain old <code>main</code>.</p>\n"},{"layout":"post","title":"How to set up and top up a prepaid SIM in Germany","date":"2016-10-03 10:35","comments":true,"categories":null,"url":"/blog/2016/10/03/prepaid-sim-in-germany/","content":"<p>I have moved to Berlin from Tokyo a week ago. I may or may not write about it later, but I&#39;m going to share more practical stuff today.</p>\n<p>Since I arrived in Germany, I bought two prepaid SIM cards and set up a SIM-free iPhone and a MiFi (mobile WiFi router). It was harder than I thought because I had never used a prepaid SIM before and most of official instructions were in German. I&#39;d like to share what I did for people like me.</p>\n<p>This post is a complement to <a href=\"http://prepaid-data-sim-card.wikia.com/wiki/Germany\">Germany | Prepaid Data SIM Card Wiki | Fandom powered by Wikia</a>. If you haven&#39;t read it yet, read it first.</p>\n<h2 id=\"initial-setup\">Initial setup</h2>\n<p>After reading the wiki, I chose <a href=\"https://www.o2online.de/\">O<sub>2</sub></a> as a network provider because of its rate and availability in Berlin&#39;s subway.</p>\n<ol>\n<li>Go to a large electronics store like Saturn.</li>\n<li>Find an O<sub>2</sub> prepaid SIM.</li>\n<li>Bring it to an O<sub>2</sub> representative in the store and ask her to activate it.</li>\n<li>Go to the casher and pay for the SIM card.</li>\n<li>Insert the SIM card into your phone/MiFi. You can ask shop staffs to open SIM card slot.</li>\n<li>Unlock the SIM card. <strong>PIN is on the white card that contains the SIM card. Also its phone number (Rufnummer) is on the same card.</strong></li>\n</ol>\n<h2 id=\"topping-up\">Topping up</h2>\n<p>You can top up your SIM via a call, O<sub>2</sub> mobile app or O<sub>2</sub> website. I used O<sub>2</sub> website because I couldn&#39;t make a call with my MiFi and I don&#39;t have German AppStore&#39;s account. The website is only in German. So it&#39;s convenient to use Google Chrome&#39;s translation feature.</p>\n<ol>\n<li>Go to a drug store chain like dm and buy one of O<sub>2</sub> top-up cards like €20. They are usually put next to other prepaid cards like Apple, Google Play, Amazon, Zalando, etc. <strong>The actual top-up code is printed on your receipt</strong>. Or you can buy a top-up code online at <a href=\"https://www.aufladen.de/en\">aufladen.de</a>. Thanks, Yan Yankowski for letting me know!</li>\n<li>Sign up for <a href=\"https://login.o2online.de/ngAuth/#/registration/mobile-registrierung\">O<sub>2</sub> website</a>.</li>\n<li>Enter your phone number (Mobilfunknummer), preliminary password (Vorläufiges Kennwort) and new password (Neues Kennwort). The preliminary password is notified via SMS. If it&#39;s for your MiFi, you can access to the MiFi&#39;s admin page and read SMS.</li>\n<li>Go to Recharge tab (Mein O<sub>2</sub> -&gt; Mein Prepaid -&gt; Guthaben &amp; Aufladen) and enter your top-up card&#39;s code.</li>\n<li>(Optional) Choose your favorite plan (Tarif &amp; SIM-Karte).</li>\n</ol>\n"},{"layout":"post","title":"Draw animated chart on React Native","date":"2016-07-18 23:43","comments":true,"categories":["JavaScript","React"],"url":"/blog/2016/07/18/draw-animated-chart-with-react-native/","content":"<p>At <a href=\"http://meguroes.connpass.com/event/32167/\">Meguro.es #4</a> on June 21th, 2016, I talked about drawing animated chart on <a href=\"https://facebook.github.io/react-native/\">React Native</a>. The talk was about the things I learned through developing an tiny app, Compare. It&#39;s a super simple app to compare temperatures.</p>\n<p>Before creating it, I had no idea about what temperatures on weather forecast, like 15 degrees Celsius, were actually like. I remember what yesterday was like, but not the numbers. Typical weather forecast apps shows only future temperatures without past records. Thanks to <a href=\"https://developer.forecast.io/\">The Dark Sky Forecast API</a>, the app fetches both of past records and future forecasts, and show them together.</p>\n<p><img src=\"/images/compare-animated.gif\" alt=\"Compare app\"></p>\n<p>The app&#39;s source code is on GitHub:</p>\n<p><a href=\"https://github.com/shuhei/Compare\">shuhei/Compare</a></p>\n<p>There might have been some charting libraries to draw similar charts, but I like to write things from scratch. I like to reinvent the wheel especially when it&#39;s a side project. Thanks to that, I found a way to animate smooth paths with the <code>Animated</code> library.</p>\n<script async class=\"speakerdeck-embed\" data-id=\"3deb649c92814572ac3412a78bb5b688\" data-ratio=\"1.77777777777778\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n<p>If I have to add something to the slides:</p>\n<ul>\n<li>It&#39;s fun to develop on React Native, and super easy to start. If you know React and CSS, you can apply your familiar ideas to mobile app development. And they are actually powerful.</li>\n<li><a href=\"http://browniefed.com/\">Jason Brown&#39;s JavaScript without Grammar</a> is an awesome blog. It has lots of articles about React Native and animation on it, which taught me a lot. Also, I found the awesomeness of <code>LayoutAnimation</code> at <a href=\"https://medium.com/@Jpoliachik/react-native-s-layoutanimation-is-awesome-4a4d317afd3e#.5tnprrm80\">Justin Poliachik&#39;s React Native’s LayoutAnimation is Awesome</a>, which is a great post too.</li>\n</ul>\n"}],"prevPage":"/","title":"Page 2 - Shuhei Kagawa","nextPage":"/blog/pages/3/"}