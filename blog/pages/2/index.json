{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts"},"posts":[{"layout":"post","title":"Angular 2 with Babel","date":"2016-05-08 15:47","comments":true,"categories":["JavaScript","Angular 2","Babel"],"url":"/blog/2016/05/08/angular-2-with-babel/","content":"<p>Although Angular 2&#39;s primary language is apparently TypeScript, many people want to use Babel as shown in <a href=\"http://angularjs.blogspot.jp/2015/09/angular-2-survey-results.html\">a survey</a>.</p>\n<p>However, <a href=\"https://angular.io\">The official documentation</a> targets only TypeScript and ES5. In addition, many pages are not yet available for ES5. That is because Angular 2 relies heavily on cutting-edge ES7 decorators and TypeScript&#39;s type annotations for annotating components and services.</p>\n<p>To fill the gap, you can use <a href=\"https://github.com/shuhei/babel-preset-angular2\"><code>babel-preset-angular2</code></a> that supports all the decorators and annotations available in TypeScript. With the preset, you can follow the official documentation for TypeScript to learn Angular 2 itself.</p>\n<h2 id=\"how-to-use-it\">How to use it</h2>\n<pre><code class=\"hljs sh\">npm install -D babel-preset-es2015 babel-preset-angular2</code></pre><p>Add <code>presets</code> to <code>.babelrc</code>. Note that the <code>presets</code>&#39; order is important.</p>\n<pre><code class=\"hljs json\">{\n  \"<span class=\"hljs-attribute\">presets</span>\": <span class=\"hljs-value\">[<span class=\"hljs-string\">\"es2015\"</span>, <span class=\"hljs-string\">\"angular2\"</span>]\n</span>}</code></pre><p>See <a href=\"https://github.com/shuhei/babel-angular2-app\"><code>babel-angular2-app</code></a> for more complete example.</p>\n<h2 id=\"supported-annotations\">Supported annotations</h2>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Example</th>\n<th>EcmaScript</th>\n<th>TypeScript</th>\n<th>Babel*</th>\n<th>Babel + angular2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Class decorator</td>\n<td><code>@Component()</code></td>\n<td>Stage 1</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Property decorator</td>\n<td><code>@Input()</code></td>\n<td>Stage 1</td>\n<td>Yes</td>\n<td>Partial*</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Parameter decorator</td>\n<td><code>@Optional()</code></td>\n<td>Stage 0</td>\n<td>Yes</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Type annotation</td>\n<td><code>foo: Foo</code></td>\n<td>-</td>\n<td>Yes</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n<p>&quot;Babel*&quot; above means Babel with the following official plugins:</p>\n<ul>\n<li><a href=\"https://babeljs.io/docs/plugins/preset-es2015/\">babel-preset-es2015</a></li>\n<li><a href=\"https://babeljs.io/docs/plugins/transform-class-properties/\">babel-plugin-transform-class-properties</a></li>\n<li><a href=\"https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy\">babel-plugin-transform-decorators-legacy</a> (not literally official but maintained by <a href=\"https://github.com/loganfsmyth\">@loganfsmyth</a>, one of Babel&#39;s core contributors)</li>\n</ul>\n<p>Property decorator in Babel is marked &quot;Partial&quot; because <code>babel-plugin-transform-decorators-legacy</code> ignores class properties without initializers.</p>\n<p>You can emulate parameter decorator and type annotation with plain ES2015 like the following but it&#39;s a little bit counterintuitive.</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloComponent</span> </span>{\n  constructor(foo: Foo, @Optional() bar: Bar) {\n    <span class=\"hljs-comment\">// Do something with foo and bar.</span>\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloComponent</span> </span>{\n  static get parameters() {\n    <span class=\"hljs-keyword\">return</span> [[Foo], [Bar, Optional()]];\n  }\n\n  constructor(foo, bar) {\n    <span class=\"hljs-comment\">// Do something with foo and bar.</span>\n  }\n}</code></pre><h2 id=\"polyfills\">Polyfills</h2>\n<p>Angular 2 beta versions had polyfill bundles but RC versions don&#39;t. But never mind. We can just import them before bootstrapping our app.</p>\n<pre><code class=\"hljs sh\">npm install -S babel-polyfill zone.js</code></pre><p><code>src/index.js</code></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Import polyfills.</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'babel-polyfill'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'zone.js/dist/zone.js'</span>;\n\n<span class=\"hljs-comment\">// Bootstrap app!</span>\n<span class=\"hljs-keyword\">import</span> {provide} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> {bootstrap} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/platform-browser-dynamic'</span>;\n<span class=\"hljs-keyword\">import</span> {ROUTER_PROVIDERS} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/router'</span>;\n<span class=\"hljs-keyword\">import</span> {LocationStrategy, HashLocationStrategy} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/common'</span>;\n\n<span class=\"hljs-keyword\">import</span> {HelloApp} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app'</span>;\n\nbootstrap(HelloApp, [\n  ROUTER_PROVIDERS,\n  provide(LocationStrategy, { useClass: HashLocationStrategy })\n]).catch(err =&gt; <span class=\"hljs-built_in\">console</span>.error(err));</code></pre><p>Note that we can use <code>babel-polyfill</code> that includes <code>core-js</code> instead of <code>es6-shim</code> and <code>reflect-metadata</code>. According to <a href=\"https://github.com/angular/angular/issues/5755\">use core-js instead of es6-shim</a>, we can use whatever ES6 + ES7 polyfill we like.</p>\n<h2 id=\"module-resolution\">Module resolution</h2>\n<p>You can use any module resolver as long as it works with Babel. I&#39;ll pick <a href=\"http://browserify.org/\">Browserify</a> here for its simplicity.</p>\n<pre><code class=\"hljs js\">npm install -D browserify babelify</code></pre><p>Add a <code>build</code> script to your <code>package.json</code> assuming that your bootstrap script locates at <code>src/index.js</code>.</p>\n<pre><code class=\"hljs json\">{\n  \"<span class=\"hljs-attribute\">scripts</span>\": <span class=\"hljs-value\">{\n    \"<span class=\"hljs-attribute\">build</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"browserify -t babelify src/index &gt; public/bundle.js\"</span>\n  </span>}\n</span>}</code></pre><pre><code class=\"hljs sh\">npm run build</code></pre><p>Isn&#39;t this simple? <code>babelify</code> automatically finds your <code>.babelrc</code> and uses the presets specified above.</p>\n<p>Of course you can use other module resolvers like Webpack or SystemJS.</p>\n<h2 id=\"offline-compilation\">Offline compilation</h2>\n<p>This is not yet available for Babel. Not completed even for TypeScript.</p>\n<p>The <a href=\"https://github.com/angular/angular/tree/master/modules/%40angular/compiler_cli\"><code>compiler_cli</code></a> seems to be deeply integrated with TypeScript compiler. It <strong>statically</strong> collects metadata from the source and feed it to the compiler. I believe that it is achievable with Babel to do the same thing.</p>\n<p>I&#39;m thinking of working on it once the TypeScript version is published and the compiler API becomes more stable.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>I&#39;ve presented how to use TypeScript-specific annotations in Babel. You can enjoy Angular 2 with your favorite transpiler.</p>\n<p>See <a href=\"https://github.com/shuhei/babel-angular2-app\"><code>babel-angular2-app</code></a> for more complete example.</p>\n"},{"layout":"post","title":"Incremental search with RxJS switchMap","date":"2016-05-02 02:18","comments":true,"categories":["JavaScript","RxJS"],"url":"/blog/2016/05/01/incremental-search-with-rxjs/","content":"<p>RxJS leads us to better design separating data flow and side-effects. In addition, it provides powerful functionalities that sophisticate the outcome application. My favorite is <a href=\"http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-switchMap\"><code>switchMap</code></a> of RxJS 5, which is equivalent to <a href=\"https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/flatmaplatest.md\"><code>flatMapLatest</code></a> in RxJS 4.</p>\n<h2 id=\"switchmap\">switchMap</h2>\n<p><code>switchMap(func)</code> is equivalent to <code>map(func).switch()</code>. It keeps subscribing latest observable at the moment and unsubscribing outdated ones so that it only streams events from latest observable at the moment. <a href=\"http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-switch\">Take a look at the marble chart for <code>switch</code></a>. It illustrates the behavior well.</p>\n<h2 id=\"incremental-search\">Incremental search</h2>\n<p><code>switchMap</code> is convenient for properly implementing incremental search. Incremental search makes multiple requests to a server. The server can respond in a different order from requests&#39;. Because of the order, a naive implementation may show a wrong result. However, you can effortlessly avoid the caveat if you use <code>switchMap</code>.</p>\n<p>Here is an example. Type fast in the text fields. <strong>Without switchMap</strong> sometimes shows a wrong result while <strong>With switchMap</strong> always works fine.</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/megiqo/embed?output\">JS Bin on jsbin.com</a><script async src=\"http://static.jsbin.com/js/embed.min.js?3.35.12\"></script></p>\n<p><code>search</code> function mocks an AJAX request. It returns a <code>Promise</code> that resolves after a random delay.</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">search</span>(<span class=\"hljs-params\">keyword</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      resolve(<span class=\"hljs-string\">'Result of '</span> + keyword);\n    }, <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">1000</span>);\n  });\n}</code></pre><p>A naive implementation always shows the last response at the time. A wrong result is shown if responses come in a different order from requests&#39;. We could add some debouncing to decrease the chance of the wrong order but it still may happen when response time is longer than the debounce time.</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> keyword = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'keyword-without'</span>);\n<span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'result-without'</span>);\n\nkeyword.addEventListener(<span class=\"hljs-string\">'keyup'</span>, e =&gt; {\n  <span class=\"hljs-keyword\">const</span> value = e.target.value;\n  search(value)\n    .then(data =&gt; result.textContent = data);\n});</code></pre><p><code>switchMap</code> guarantees that the last keyword&#39;s result is finally shown.</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> keyword = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'keyword-with'</span>);\n<span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'result-with'</span>);\n\n<span class=\"hljs-keyword\">const</span> keyword$ = Rx.Observable.fromEvent(keyword, <span class=\"hljs-string\">'keyup'</span>)\n  .map(e =&gt; e.target.value);\nkeyword$\n  .switchMap(search)\n  .subscribe(data =&gt; result.textContent = data);</code></pre>"},{"layout":"post","title":"Clean up before exiting in Haskell","date":"2016-04-06 00:32","comments":true,"categories":["Haskell"],"url":"/blog/2016/04/06/clean-up-before-exiting-in-haskell/","content":"<p>Once upon a time (or a several days ago), I was reading <a href=\"http://amzn.to/22Qe9zf\">Programming in Haskell</a>. When I ran 9.7&#39;s Game of Life, which shows Game of Life animation on the terminal, the terminal&#39;s cursor was flickering and annoying. So I tried to hide it when starting and show when exiting.</p>\n<pre><code class=\"hljs hs\"><span class=\"hljs-import\"><span class=\"hljs-keyword\">import</span> System.Process <span class=\"hljs-container\">(<span class=\"hljs-title\">system</span>)</span></span>\n\n<span class=\"hljs-title\">main</span> :: <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-comment\">-- Hide the cursor</span>\n  system <span class=\"hljs-string\">\"tput civis\"</span>\n  <span class=\"hljs-comment\">-- Show the Game of Life</span>\n  life glider\n  <span class=\"hljs-comment\">-- Show the cursor (but the code does not reach here!)</span>\n  system <span class=\"hljs-string\">\"tput cvvis\"</span>\n  return ()\n\n<span class=\"hljs-title\">life</span> :: <span class=\"hljs-type\">Board</span> -&gt; <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">glider</span> :: <span class=\"hljs-type\">Board</span></code></pre><p>But the code does not reach the line that shows the cursor because <code>life</code> is a infinite loop. If I quit the program with <code>Ctrl+C</code>, the cursor remains hidden.</p>\n<p>So I wrote a function that loops <code>a -&gt; IO a</code> until interrupted by a signal, referring to <a href=\"http://stackoverflow.com/a/18430872/822317\">unix - Killing a Haskell binary - Stack Overflow</a>. It manages a state of whether the program was interrupted in a <code>MVar</code> and stops the loop when interrupted.</p>\n<pre><code class=\"hljs hs\"><span class=\"hljs-import\"><span class=\"hljs-keyword\">import</span> Control.Concurrent.MVar <span class=\"hljs-container\">(<span class=\"hljs-type\">MVar</span>, <span class=\"hljs-title\">newEmptyMVar</span>, <span class=\"hljs-title\">putMVar</span>, <span class=\"hljs-title\">tryTakeMVar</span>)</span></span>\n<span class=\"hljs-import\"><span class=\"hljs-keyword\">import</span> System.Posix.Signals <span class=\"hljs-container\">(<span class=\"hljs-type\">Handler</span>, <span class=\"hljs-type\">Handler(CatchOnce)</span>, <span class=\"hljs-title\">installHandler</span>, <span class=\"hljs-title\">sigINT</span>, <span class=\"hljs-title\">sigTERM</span>)</span></span>\n\n<span class=\"hljs-title\">loopUntilInterruption</span> :: (a -&gt; <span class=\"hljs-type\">IO</span> a) -&gt; a -&gt; <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">loopUntilInterruption</span> p init = <span class=\"hljs-keyword\">do</span>\n  v &lt;- newEmptyMVar\n  installHandler sigINT (handler v) <span class=\"hljs-type\">Nothing</span>\n  installHandler sigTERM (handler v) <span class=\"hljs-type\">Nothing</span>\n  loop v p init\n\n<span class=\"hljs-title\">handler</span> :: <span class=\"hljs-type\">MVar</span> () -&gt; <span class=\"hljs-type\">Handler</span>\n<span class=\"hljs-title\">handler</span> v = <span class=\"hljs-type\">CatchOnce</span> $ putMVar v ()\n\n<span class=\"hljs-title\">loop</span> :: <span class=\"hljs-type\">MVar</span> () -&gt; (a -&gt; <span class=\"hljs-type\">IO</span> a) -&gt; a -&gt; <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">loop</span> v p prev = <span class=\"hljs-keyword\">do</span>\n  x &lt;- p prev\n  val &lt;- tryTakeMVar v\n  <span class=\"hljs-keyword\">case</span> val <span class=\"hljs-keyword\">of</span>\n    <span class=\"hljs-type\">Just</span> _ -&gt; return ()\n    <span class=\"hljs-type\">Nothing</span> -&gt; loop v p x &gt;&gt; return ()</code></pre><p>In the Game of Life, I changed the type of <code>life</code> so that it returns the result of its previous result and loop with <code>loop</code>. Now the clean up code will be called when interrupted by a signal.</p>\n<pre><code class=\"hljs hs\"><span class=\"hljs-import\"><span class=\"hljs-keyword\">import</span> System.Process <span class=\"hljs-container\">(<span class=\"hljs-title\">system</span>)</span></span>\n\n<span class=\"hljs-title\">main</span> :: <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-comment\">-- Hide the cursor</span>\n  system <span class=\"hljs-string\">\"tput civis\"</span>\n  <span class=\"hljs-comment\">-- Loop until interrupted</span>\n  loopUntilInterruption life glider\n  <span class=\"hljs-comment\">-- Show the cursor (the code will reach here now!)</span>\n  system <span class=\"hljs-string\">\"tput cvvis\"</span>\n  return ()\n\n<span class=\"hljs-title\">life</span> :: <span class=\"hljs-type\">Board</span> -&gt; <span class=\"hljs-type\">IO</span> <span class=\"hljs-type\">Board</span>\n<span class=\"hljs-title\">glider</span> :: <span class=\"hljs-type\">Board</span></code></pre><p>And they lived happily ever after.</p>\n"}],"prevPage":"/","title":"Page 2 - Shuhei Kagawa","nextPage":"/blog/pages/3/"}