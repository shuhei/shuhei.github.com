{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts"},"posts":[{"layout":"post","title":"WebGL な日本の地価マップをタッチ対応してみた","date":"2014-09-27 16:53","comments":true,"categories":["WebGL","JavaScript"],"url":"/blog/2014/09/27/land-prices-on-ios/","content":"<p>iOS 8 の Safari で WebGL が動くようになったので、以前作った日本の地価の 3D で表示するやつをタッチ対応してみました。</p>\n<p><img src=\"/images/webland-ios.png\" alt=\"Land Prices in Japan on iOS 8 Safari\"></p>\n<p><a href=\"/webland\">Land Prices in Japan</a></p>\n<p>ソースは <a href=\"https://github.com/shuhei/webland\">GitHub にあります</a>。</p>\n<p>タッチ対応というのは、大体以下のような感じです。</p>\n<ul>\n<li>Viewport が動かないように調整。</li>\n<li>ドラッグで上下左右に動けるように。タッチデバイスかどうがで、タッチ系のイベントを使うかマウス系のイベントを使うかを切り替えています。</li>\n<li>ピンチでズームできるように。難しいかなと思ったんですが、<code>gesturestart</code>, <code>gesturechange</code>, <code>gestureend</code> イベントがあったので簡単でした。</li>\n<li>ダブルタップで視点を切り替えられるように。ダブルタップやダブルクリックのイベントというのは特にないので、<code>touchstart</code> の時に一個前のイベントの時刻と比較して判断しています。</li>\n</ul>\n<p>早速買い換えた iPhone 6 Plus でぬるぬる動く上に、iPhone 5 でも余裕で動きます。直接触れるので、画面は小さいものの PC より楽しいなあと思いました。今後はモバイルでの WebGL が面白そうですね。</p>\n"},{"layout":"post","title":"Grunt と ES6 Modules","date":"2014-08-23 01:21","comments":true,"categories":["JavaScript"],"url":"/blog/2014/08/23/grunt-and-es6-modules/","content":"<p>大分間が空きましたが、社内勉強会で Grunt と ES6 Modules について発表したので、このへんで書いておきます。</p>\n<h2 id=\"-introduction-to-grunt-https-speakerdeck-com-shuhei-introduction-to-grunt-\"><a href=\"https://speakerdeck.com/shuhei/introduction-to-grunt\">Introduction to Grunt</a></h2>\n<p>こっちは、デザイナー向けに Grunt を紹介したときの資料。これまでよくわからず使っていた Grunt の設定ファイルについてちゃんと調べました。Qiita の<a href=\"http://qiita.com/shuhei/items/1156a795903b55d6b0d7\">Grunt の設定オブジェクトの秘密</a> にも詳しく書いてます。やっとわかったマルチタスク。</p>\n<p>しかし、勉強会では結局何ができるか、どう運用するかの話が中心で、設定ファイルの話はしませんでした。初めての人には、細かいことよりも、まずは何ができるかですよね。良い経験になりました。</p>\n<script async class=\"speakerdeck-embed\" data-id=\"39e78f00fade0131d88d6a0d18b48761\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n<h2 id=\"-start-es6-today-https-speakerdeck-com-shuhei-start-es6-modules-today-\"><a href=\"https://speakerdeck.com/shuhei/start-es6-modules-today\">Start ES6 Today</a></h2>\n<p>こっちは、あまりちゃんと調べられてなくて中途半端です。</p>\n<p>結論としては、ES6 Modules はまだ早い。<a href=\"https://github.com/systemjs/systemjs\">System.js</a> とか使えば今でも使えそうだけど、それなら Browerify でいいかなというのが今の気分です。むしろ、class とか ES6 の他の文法を使いたい。Traceur Compiler や <code>jsx --harmony</code> でコンパイルできる AltJS と考えれば。</p>\n<script async class=\"speakerdeck-embed\" data-id=\"b07645a0fadf0131d88c6a0d18b48761\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n"},{"layout":"post","title":"Gulp でブログを書く","date":"2014-06-08 17:23","comments":true,"categories":["JavaScript","gulp"],"url":"/blog/2014/06/08/blog-with-gulp/","content":"<p>もともと Octopress/Jekyll 製だったこのブログを、Ruby を捨てて gulp でページを生成するように書き直しました。</p>\n<p><a href=\"https://github.com/shuhei/shuhei.github.com/blob/source/gulpfile.babel.js\">shuhei.github.io / gulpfile.babel.js</a></p>\n<p>ディレクトリ構成は Octopress そのまま。rake タスクではなく、gulp のタスクでサイトをビルド、デプロイします。</p>\n<p>機能は本当に最小限で、記事ページ、静的ページと index, archive の生成だけです。</p>\n<h2 id=\"-\">経緯</h2>\n<p>動機は Jekyll が重くビルドに時間がかかること。他のもっと良いのがないかなあと思っていたのですが、そもそも大した機能は必要ないので、今年の初めにはまっていた gulp で自作しました。</p>\n<p>ビルドの部分は、ファイルを変換して書き出すという gulp でやりやすいタスクです。ただ GitHub Pages にデプロイする部分は git のコマンド実行が続くため面倒で、その部分だけ gulp で実装せずにRakefile をそのまま残していました。</p>\n<p>どうも気持ち悪かったので、ついに重い腰を上げて書いてみました。当初 child_process を使って書いたのですが、<a href=\"https://github.com/sun-zheng-an/gulp-shell\">gulp-shell</a>を見つけて使うようにしたらすっきりしました。</p>\n<h2 id=\"-\">操作</h2>\n<p>gulp でビルドします。</p>\n<pre><code class=\"hljs shell\">gulp</code></pre><p>表示を確認しながら編集したいときは、以下でローカルにサーバが立ち上がり、ファイル変更時にビルドしなおしてくれます。</p>\n<pre><code class=\"hljs shell\">gulp watch</code></pre><p>デプロイも gulp タスクです。</p>\n<pre><code class=\"hljs shell\">gulp deploy</code></pre><h2 id=\"-\">感想</h2>\n<p>当たり前の感想ですが、gulp はデプロイのようなタスクには向いてないものの、 静的サイトの生成には悪くないなと思いました。</p>\n<p>とは言え、サイト全体の情報を扱うのはやりにくいです。現在は index, archive のページを、各記事の stream から分岐して作っています。また、必要ないと思いサイドバーをつけていないのですが、つける場合には一旦全記事を読み込んでサイドバー向けの情報を作ってから各記事のページにくっつける必要があります。その辺は今後の課題ですかね。</p>\n"}],"prevPage":"/blog/pages/7/","title":"Page 8 - Shuhei Kagawa","nextPage":"/blog/pages/9/"}