{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts"},"posts":[{"layout":"post","title":"Grunt と ES6 Modules","date":"2014-08-23 01:21","comments":true,"categories":["JavaScript"],"url":"/blog/2014/08/23/grunt-and-es6-modules/","content":"<p>大分間が空きましたが、社内勉強会で Grunt と ES6 Modules について発表したので、このへんで書いておきます。</p>\n<h2 id=\"-introduction-to-grunt-https-speakerdeck-com-shuhei-introduction-to-grunt-\"><a href=\"https://speakerdeck.com/shuhei/introduction-to-grunt\">Introduction to Grunt</a></h2>\n<p>こっちは、デザイナー向けに Grunt を紹介したときの資料。これまでよくわからず使っていた Grunt の設定ファイルについてちゃんと調べました。Qiita の<a href=\"http://qiita.com/shuhei/items/1156a795903b55d6b0d7\">Grunt の設定オブジェクトの秘密</a> にも詳しく書いてます。やっとわかったマルチタスク。</p>\n<p>しかし、勉強会では結局何ができるか、どう運用するかの話が中心で、設定ファイルの話はしませんでした。初めての人には、細かいことよりも、まずは何ができるかですよね。良い経験になりました。</p>\n<script async class=\"speakerdeck-embed\" data-id=\"39e78f00fade0131d88d6a0d18b48761\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n<h2 id=\"-start-es6-today-https-speakerdeck-com-shuhei-start-es6-modules-today-\"><a href=\"https://speakerdeck.com/shuhei/start-es6-modules-today\">Start ES6 Today</a></h2>\n<p>こっちは、あまりちゃんと調べられてなくて中途半端です。</p>\n<p>結論としては、ES6 Modules はまだ早い。<a href=\"https://github.com/systemjs/systemjs\">System.js</a> とか使えば今でも使えそうだけど、それなら Browerify でいいかなというのが今の気分です。むしろ、class とか ES6 の他の文法を使いたい。Traceur Compiler や <code>jsx --harmony</code> でコンパイルできる AltJS と考えれば。</p>\n<script async class=\"speakerdeck-embed\" data-id=\"b07645a0fadf0131d88c6a0d18b48761\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n"},{"layout":"post","title":"Gulp でブログを書く","date":"2014-06-08 17:23","comments":true,"categories":["JavaScript","gulp"],"url":"/blog/2014/06/08/blog-with-gulp/","content":"<p>もともと Octopress/Jekyll 製だったこのブログを、Ruby を捨てて gulp でページを生成するように書き直しました。</p>\n<p><a href=\"https://github.com/shuhei/shuhei.github.com/blob/source/gulpfile.babel.js\">shuhei.github.io / gulpfile.babel.js</a></p>\n<p>ディレクトリ構成は Octopress そのまま。rake タスクではなく、gulp のタスクでサイトをビルド、デプロイします。</p>\n<p>機能は本当に最小限で、記事ページ、静的ページと index, archive の生成だけです。</p>\n<h2 id=\"-\">経緯</h2>\n<p>動機は Jekyll が重くビルドに時間がかかること。他のもっと良いのがないかなあと思っていたのですが、そもそも大した機能は必要ないので、今年の初めにはまっていた gulp で自作しました。</p>\n<p>ビルドの部分は、ファイルを変換して書き出すという gulp でやりやすいタスクです。ただ GitHub Pages にデプロイする部分は git のコマンド実行が続くため面倒で、その部分だけ gulp で実装せずにRakefile をそのまま残していました。</p>\n<p>どうも気持ち悪かったので、ついに重い腰を上げて書いてみました。当初 child_process を使って書いたのですが、<a href=\"https://github.com/sun-zheng-an/gulp-shell\">gulp-shell</a>を見つけて使うようにしたらすっきりしました。</p>\n<h2 id=\"-\">操作</h2>\n<p>gulp でビルドします。</p>\n<pre><code class=\"hljs shell\">gulp</code></pre><p>表示を確認しながら編集したいときは、以下でローカルにサーバが立ち上がり、ファイル変更時にビルドしなおしてくれます。</p>\n<pre><code class=\"hljs shell\">gulp watch</code></pre><p>デプロイも gulp タスクです。</p>\n<pre><code class=\"hljs shell\">gulp deploy</code></pre><h2 id=\"-\">感想</h2>\n<p>当たり前の感想ですが、gulp はデプロイのようなタスクには向いてないものの、 静的サイトの生成には悪くないなと思いました。</p>\n<p>とは言え、サイト全体の情報を扱うのはやりにくいです。現在は index, archive のページを、各記事の stream から分岐して作っています。また、必要ないと思いサイドバーをつけていないのですが、つける場合には一旦全記事を読み込んでサイドバー向けの情報を作ってから各記事のページにくっつける必要があります。その辺は今後の課題ですかね。</p>\n"},{"layout":"post","title":"タッチタイピングに移行","date":"2014-04-05 13:04","comments":true,"categories":null,"url":"/blog/2014/04/05/transition-to-touch-typing/","content":"<p>二週間くらい前にふと思い立ち、タッチタイピングを練習し始めました。何となく打てるようになってきたので、ここら辺でタイピングの練習がてら雑感を書いておきます。</p>\n<h1 id=\"-\">動機</h1>\n<p>これまでタイピングは我流でやっていて、普通に仕事をするには支障がなかったのですが、タッチタイピングができないことにコンプレックスを持っていました。まず人前でタイプするのが恥ずかしい。それから妻や同僚のタイピングが速く、引け目を感じていました。特に今の職場に入った当初は周囲の人の異常なタイピング音には驚きました。</p>\n<p>それから、ホームポジションを無視した時によって変わる打ち方だったので、指の移動距離が大きく速度に限界がありました。また間違いも多かったです。これからの人生でもかなりの量をタイプする訳ですから、生産性に大きな差が出ます。</p>\n<p>そして、ツールの恩恵を受けたかったというのもあります。世の中のプログラマ向けのツールにはホームポジションで使う事が前提になっているものが多くあります。以前 Vim の本を買ったら、最初にタッチタイピングをできない人は、Vim の前にタッチタイピングを練習してくださいと書いてあり悔しい思いをしました。</p>\n<h1 id=\"-\">練習</h1>\n<p>そんな訳で、まず練習するにあたり、ただタイピングしまくるのではなく、ホームポジションでの正しいタイピングの練習のためのソフトを探しました。良さそうに見えたのは以下です。</p>\n<ul>\n<li><a href=\"http://typing.twi1.me/training\">ひよこでも出来るタイピング練習講座</a></li>\n<li><a href=\"http://type-fu.com/\">Type Fu</a></li>\n</ul>\n<p>「ひよこでも出来る・・・」は、キーの配列を覚えるというよりは日本語の文字を見て直接打てるようにするというものでした。たしかに合理的だと思いましたが、仕事柄プログラムや英語を書くので、まずはキーの配列を覚えるため「Type Fu」という英語向けのキー練習ソフトで練習しました。最初は少ないキーからだんだんと打つキーの数を増やしていく形式です。他にもことわざや名言で練習するモードもあり面白いです。</p>\n<p>昼間会社ではこれまでの打ち方で仕事をし、夜と週末にタッチタイピングの練習をしました。一週間これをやるとかろうじてアルファベット全てが押せるようになったので、会社でもタッチタイピングを始めました。この時点ではまだ大分遅く仕事も遅くなったのですが、遅くなった分は残業で何とかカバーしました。するとどんどん慣れてきて、今ではそこまで仕事に支障が出ないくらいになってきました。もともとタイピングが遅かったのもありますが。</p>\n<h1 id=\"-\">工夫したこと</h1>\n<p>矢印キーが遠いので <a href=\"https://pqrs.org/macosx/keyremap4macbook/\">KeyRemap4MacBook</a> を使って Ctrl + h/j/k/l を矢印キーに割り当てました。これでホームポジションのまま移動ができます。Vim 操作にも慣れるというおまけつき。</p>\n<p><a href=\"http://www.alfredapp.com/\">Alfred</a> を入れました。アプリの起動に使おうと思って。他にも直接 Google 検索できたりととても便利です。</p>\n<p>そして、まずは形からということで、つい数日前に <a href=\"https://www.pfu.fujitsu.com/hhkeyboard/hhkbpro2/nokeytop.html\">Happy Hacking Keyboard の無刻印キーボード</a>を購入しました。キーボードを見ないようにするには何も書いてなければ良いじゃないというわけです。矢印キーもないし。叩いたときの感触が良くて気に入っていますが、会社に持っていくのはもう少し速く打てるようになってからにしようかと思っています。</p>\n<h1 id=\"-\">目がやたらと疲れるようになった</h1>\n<p>これまでは朝から晩までパソコンの前にいても、目がちょっと疲れたなというくらいで視力も落ちなかったのですが、タッチタイピングを練習し始めてからは一二時間タイプしていると視界がかすんできます。おそらく、これまでは手元と画面を交互に見ていたため目に優しかったのでしょう。タッチタイピングでも精度が十分ならばよそ見しながら打てば良いのですが、まだ結構間違えるので画面を凝視しています。目を守るためには、精度を上げないといけませんね。</p>\n"}],"prevPage":"/blog/pages/7/","title":"Page 8 - Shuhei Kagawa","nextPage":"/blog/pages/9/"}