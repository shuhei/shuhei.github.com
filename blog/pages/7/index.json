{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts","cssFiles":["node_modules/highlight.js/styles/monokai-sublime.css","source/_css/style.css"]},"posts":[{"layout":"post","title":"Let's create a Babel plugin","date":"2015-09-13 14:22","comments":true,"categories":["JavaScript","Babel"],"url":"/blog/2015/09/13/lets-create-a-babel-plugin/","content":"<p><strong>[EDIT] This article was written for Babal 5.x, which is outdated now. I recommend <a href=\"https://github.com/thejameskyle/babel-handbook/\">thejameskyle/babel-handbook</a> as more up-to-date documentation.</strong></p>\n<p><a href=\"https://babeljs.io/\">Babel</a> is the great tool that transpiles ES2015, ES7, JSX and such into ES5 and make them available on the browsers. If you are a person like me, you might use it on a daily basis.</p>\n<p>In addition to to <a href=\"https://babeljs.io/docs/advanced/transformers/\">the built-in transformers</a>, you can add your own transpilation rules by employing third-party plugins. For example, I have been developing <a href=\"https://github.com/shuhei/babel-plugin-angular2-annotations\">a plugin that enables you to write Angular 2 apps with Babel</a> lately. It is easier to develop than you may think. Let me introduce how to create a plugin for Babel 5.x.</p>\n<h2 id=\"how-babel-works\">How Babel works</h2>\n<p>Simply put, Babel works like the following:</p>\n<ol>\n<li>Babylon, the parser of Babel, parses source code into AST.</li>\n<li>Transformers transforms AST into another AST in sequence.</li>\n<li>Generators generates JavaScript code from the final AST.</li>\n</ol>\n<p>In the step 1, AST is for <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">Abstract Syntax Tree</a>, which represents the structure of source code as a tree. Babel&#39;s AST is based on a specfication called ESTree and has some extensions for non-standard nodes like ES7+, JSX and flowtype. You can check the ESTree spec at the following links:</p>\n<ul>\n<li><a href=\"https://github.com/estree/estree/blob/master/spec.md\">Core</a></li>\n<li><a href=\"https://github.com/estree/estree/blob/master/es6.md\">ES6</a></li>\n</ul>\n<p>In the step 2, transformers consists of <a href=\"https://babeljs.io/docs/advanced/transformers/\">the built-in transformers</a>, like <a href=\"es6.classes\">es6.classes</a>, and third-party plugin transformers. As of Babel 6.0, the built-in transpilers will also be extracted as external plugin modules. So there will be no border between the build-in and third-party plugins.</p>\n<p>So, what you have to do is write a transformer that transforms AST into another AST. You don&#39;t need to parse JS or generate JS from AST by yourself. It will be greatly effective compared to introducing another tool that parses JS by its own. Also, Babel&#39;s powerful API will make it easier than using the raw esprima tools.</p>\n<h2 id=\"what-you-can-not-do\">What you can (not) do</h2>\n<p>You can do almost anything as long as it&#39;s in the syntax that Babylon supports, ES2015, ES7+, JSX, flowtype and etc. You can&#39;t introduce new syntax because Babel currently doesn&#39;t support parser extension by plugins. (You can actually accomplish it by monkey-patching Babylon though.)</p>\n<h2 id=\"create-a-project\">Create a project</h2>\n<p>Create a directory in the format of <code>babel-plugin-*</code>. The <code>*</code> part turns to be your plugin name. In the directory, you can create a Babel plugin project with <code>babel-plugin init</code>, which is installed by <code>npm install -g babel</code>.</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># Prepare a project directory.</span>\nmkdir babel-plugin-foo-bar\n<span class=\"hljs-built_in\">cd</span> babel-plugin-foo-bar\n<span class=\"hljs-comment\"># Generate necessary files.</span>\nnpm install -g babel\nbabel-plugin init\n<span class=\"hljs-comment\"># Install dependencies.</span>\nnpm install</code></pre><p>The following structure should have been generated:</p>\n<pre><code class=\"hljs \">.\n├── .gitignore\n├── .npmigonore\n├── LICENSE\n├── README.md\n├── node_modules\n├── package.json\n└── src\n    └── index.js</code></pre><p>You will find some npm-run-scripts in the <code>package.json</code>:</p>\n<ul>\n<li><code>npm run build</code> transpiles files under <code>src</code> directory with Babel and output the result into <code>lib</code> directory.</li>\n<li><code>npm run push</code> releases a newer version of the plugin. It takes care of git commit, tag and npm package.</li>\n<li><code>npm test</code> runs <code>babel-plugin test</code> but fails because the command doesn&#39;t exist. <a href=\"https://github.com/babel/babel/issues/1950\">It seems like it will work in the future.</a> So, prepare your favorite test runner like <code>mocha</code> for now.</li>\n</ul>\n<p>With this setup, you can write your plugin itself with Babel&#39;s features. <code>src</code> should be ignored in npm and <code>lib</code> in git.</p>\n<h2 id=\"transformer\">Transformer</h2>\n<p><code>src/index.js</code>, the meat of the plugin, looks like this:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">/* eslint no-unused-vars:0 */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">{ Plugin, types: t }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Plugin(<span class=\"hljs-string\">\"foo\"</span>, {\n    <span class=\"hljs-attr\">visitor</span>: {\n      <span class=\"hljs-comment\">// your visitor methods go here</span>\n    }\n  });\n}</code></pre><p>It exports a factory function that creates a <code>Plugin</code> instance. The <code>Plugin</code> constructor gets the plugin&#39;s name and a configuration object.</p>\n<p>The <code>visitor</code> property holds methods named as AST node types. A Babel transformer traverses AST from the top to the bottom. Each method is called when the trasnformer visits the matched nodes. For instance, you can manipulate class declarations and function declarations as the following:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">{ Plugin, types: t }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Plugin(<span class=\"hljs-string\">\"foo\"</span>, {\n    <span class=\"hljs-attr\">visitor</span>: {\n      ClassDeclaration(node, parent) {\n        <span class=\"hljs-comment\">// Do something on a class declaration node.</span>\n      },\n      FunctionDeclaration(node, parent) {\n        <span class=\"hljs-comment\">// Do something on a function declaration node.</span>\n      }\n    }\n  });\n};</code></pre><p>You can also use <code>alias</code> instead of plain node types to match multiple node types. For example, <code>Function</code> matches against <code>FunctionDeclaration</code> and <code>FunctionExpression</code>.</p>\n<p><code>types</code> is another important thing. It contains a bunch of utility functions for AST manipulation.</p>\n<ul>\n<li>AST node generation functions such as <code>identifier()</code>, <code>memberExpression()</code> and <code>assignmentExpression</code>. Their names are lowerCamelCased versions of the corresponding node types. You can check their arguments at <a href=\"https://github.com/babel/babel/tree/master/packages/babel/src/types/definitions\">definitions</a>&#39; <code>builder</code> properties.</li>\n<li>AST node check functions such as <code>isIdentifier()</code> and <code>isDecorator()</code>. You can shallowly check node properties with the second argument.</li>\n</ul>\n<p>The functions are <a href=\"https://github.com/babel/babel/blob/v5.8.24/packages/babel/src/types/index.js\">generated</a> from <a href=\"https://github.com/babel/babel/tree/master/packages/babel/src/types/definitions\">definitions</a>。The definitions will serve as a reference.</p>\n<p>The best examples of AST transformation using <code>types</code> functions are undoubtedly <a href=\"https://github.com/babel/babel/tree/v5.8.24/packages/babel/src/transformation/transformers\">the source code of the built-in transformers</a>. Pick the closest one to what you want from <a href=\"https://babeljs.io/docs/advanced/transformers/\">the list</a> and check out the source code. <a href=\"https://babeljs.io/docs/advanced/plugins/\">The official documentation</a> will also help.</p>\n<h2 id=\"case-study-assign-class-constructor-s-arguments-as-instance-properties\">Case study: Assign class constructor&#39;s arguments as instance properties</h2>\n<p>As a case study, I built a plugin called <a href=\"https://github.com/shuhei/babel-plugin-auto-assign\">babel-plugin-auto-assign</a> that &quot;assigns class constructor&#39;s arguments as instance properties&quot;, which resembles TypeScript&#39;s parameter properties in its action. It is intended to be used with class-based dependency injection like Angular&#39;s.</p>\n<p>To avoid unawarely messing up constructors, let&#39;s apply the transformation only to classes with a decrator called <code>@autoAssign</code>. <code>@autoAssign</code> is a so-called <a href=\"https://github.com/jonathandturner/brainstorming/blob/master/README.md#c6-ambient-decorators\">ambient decorator</a> because it should not appear in the output.</p>\n<p>Before:</p>\n<pre><code class=\"hljs js\">@autoAssign\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Hello</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(foo, bar, baz) {\n  }\n}</code></pre><p>After:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Hello</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(foo, bar, baz) {\n    <span class=\"hljs-keyword\">this</span>.foo = foo;\n    <span class=\"hljs-keyword\">this</span>.bar = bar;\n    <span class=\"hljs-keyword\">this</span>.baz = baz;\n  }\n}</code></pre><p>Note that we can leave the ES6 class as is because it&#39;s going to be transformed to ES5 by the subsequent built-in transformers. Babel plugin transformers are applied <strong>before</strong> the built-in transformers by default. If you want to apply a plugin after the built-in transformers, suffix the plugin name with <code>:after</code> like <code>babel --plugins foo:after index.js</code>.</p>\n<h2 id=\"ast-before-after-transformation\">AST before/after transformation</h2>\n<p>To transform AST, we need to know how the starting post and the goal look like. You can visualize source code in AST parsed by Babylon with <a href=\"http://felix-kling.de/esprima_ast_explorer\">Felix Kling&#39;s JS AST Explorer</a>.</p>\n<ul>\n<li><a href=\"http://felix-kling.de/esprima_ast_explorer/#/OuFSNzgCl2\">Before transformation</a></li>\n<li><a href=\"http://felix-kling.de/esprima_ast_explorer/#/tZsOQTyns6\">After transformation</a></li>\n</ul>\n<p>It also works to examine nodes with <code>console.log()</code>.</p>\n<h2 id=\"code\">Code</h2>\n<p>Once you get the ASTs, half of the work is done. Let&#39;s write some code to insert AST nodes using <code>types</code> functions.</p>\n<p><a href=\"https://github.com/shuhei/babel-plugin-auto-assign\">The complete project</a> includes unit testing with fixtures.</p>\n<p><code>src/index.js</code></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> AutoAssign <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./auto-assign'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">{ Plugin, types: t }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Plugin(<span class=\"hljs-string\">'autoAssign'</span>, {\n    <span class=\"hljs-attr\">visitor</span>: {\n      <span class=\"hljs-attr\">ClassDeclaration</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, parent</span>) </span>{\n        <span class=\"hljs-keyword\">new</span> AutoAssign(t).run(node);\n      }\n    }\n  });\n}</code></pre><p><code>src/auto-assign.js</code></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AutoAssign</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(types) {\n    <span class=\"hljs-keyword\">this</span>.types = types;\n  }\n\n  run(klass) {\n    <span class=\"hljs-comment\">// Process only if `@autoAssign` decorator exists.</span>\n    <span class=\"hljs-keyword\">const</span> decorators = <span class=\"hljs-keyword\">this</span>.findautoAssignDecorators(klass);\n    <span class=\"hljs-keyword\">if</span> (decorators.length &gt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-comment\">// Get constructor and its paremeters.</span>\n      <span class=\"hljs-keyword\">const</span> ctor = <span class=\"hljs-keyword\">this</span>.findConstructor(klass);\n      <span class=\"hljs-keyword\">const</span> args = <span class=\"hljs-keyword\">this</span>.getArguments(ctor);\n      <span class=\"hljs-comment\">// Prepend assignment statements to the constructor.</span>\n      <span class=\"hljs-keyword\">this</span>.prependAssignments(ctor, args);\n      <span class=\"hljs-comment\">// Delete `@autoAssign`.</span>\n      <span class=\"hljs-keyword\">this</span>.deleteDecorators(klass, decorators);\n    }\n  }\n\n  findautoAssignDecorators(klass) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">klass.decorators || []</span>).<span class=\"hljs-params\">filter</span>(<span class=\"hljs-params\">(decorator</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">return</span> decorator.expression.name === <span class=\"hljs-string\">'autoAssign'</span>;\n    });\n  }\n\n  deleteDecorators(klass, decorators) {\n    decorators.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">decorator</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">const</span> index = klass.decorators.indexOf(decorator);\n      <span class=\"hljs-keyword\">if</span> (index &gt;= <span class=\"hljs-number\">0</span>) {\n        klass.decorators.splice(index, <span class=\"hljs-number\">1</span>);\n      }\n    });\n  }\n\n  findConstructor(klass) {\n    <span class=\"hljs-keyword\">return</span> klass.body.body.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">body</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">return</span> body.kind === <span class=\"hljs-string\">'constructor'</span>;\n    })[<span class=\"hljs-number\">0</span>];\n  }\n\n  getArguments(ctor) {\n    <span class=\"hljs-keyword\">return</span> ctor.value.params;\n  }\n\n  prependAssignments(ctor, args) {\n    <span class=\"hljs-keyword\">const</span> body = ctor.value.body.body;\n    args.slice().reverse().forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">arg</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">const</span> assignment = <span class=\"hljs-keyword\">this</span>.buildAssignment(arg);\n      body.unshift(assignment);\n    });\n  }\n\n  buildAssignment(arg) {\n    <span class=\"hljs-keyword\">const</span> self = <span class=\"hljs-keyword\">this</span>.types.identifier(<span class=\"hljs-string\">'this'</span>);\n    <span class=\"hljs-keyword\">const</span> prop = <span class=\"hljs-keyword\">this</span>.types.memberExpression(self, arg);\n    <span class=\"hljs-keyword\">const</span> assignment = <span class=\"hljs-keyword\">this</span>.types.assignmentExpression(<span class=\"hljs-string\">'='</span>, prop, arg);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.types.expressionStatement(assignment);\n  }\n}</code></pre><h2 id=\"run-\">Run!</h2>\n<p>Use <code>--optional es7.decorators</code> option in order to support decorators. You can specify plugins by file path in addition to plugin name, which is convenient for development.</p>\n<pre><code class=\"hljs \">npm run build\necho '@autoAssign class Hello { constructor(foo, bar, baz) {} }' | babel --optional es7.decorators --plugins ./lib/index.js</code></pre><p>Here comes the result!</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-meta\">\"use strict\"</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_classCallCheck</span>(<span class=\"hljs-params\">instance, Constructor</span>) </span>{ <span class=\"hljs-keyword\">if</span> (!(instance <span class=\"hljs-keyword\">instanceof</span> Constructor)) { <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">\"Cannot call a class as a function\"</span>); } }\n\n<span class=\"hljs-keyword\">var</span> Hello = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Hello</span>(<span class=\"hljs-params\">foo, bar, baz</span>) </span>{\n    _classCallCheck(<span class=\"hljs-keyword\">this</span>, _Hello);\n\n    <span class=\"hljs-keyword\">this</span>.foo = foo;\n    <span class=\"hljs-keyword\">this</span>.bar = bar;\n    <span class=\"hljs-keyword\">this</span>.baz = baz;\n  }\n\n  <span class=\"hljs-keyword\">var</span> _Hello = Hello;\n  <span class=\"hljs-keyword\">return</span> Hello;\n})();</code></pre><h2 id=\"publish\">Publish</h2>\n<p>After you write README and commit it, you can publish your plugin to the world by <code>npm run push</code>.</p>\n<p>Let&#39;s create awesome babel plugins!</p>\n<h2 id=\"references\">References</h2>\n<h3 id=\"documentation\">Documentation</h3>\n<ul>\n<li><a href=\"https://babeljs.io/docs/advanced/plugins/\">Plugins - Babel</a></li>\n<li><a href=\"https://github.com/estree/estree\">ESTree</a></li>\n<li><a href=\"https://github.com/babel/babel/tree/v5.8.24/packages/babel/src/transformation/transformers\">Built-in transformers</a></li>\n</ul>\n<h3 id=\"projects\">Projects</h3>\n<ul>\n<li><a href=\"https://github.com/shuhei/babel-plugin-auto-assign\">shuhei/babel-plugin-auto-assign</a> The case study project in this article.</li>\n<li><a href=\"https://github.com/shuhei/babel-plugin-angular2-annotations\">shuhei/babel-plugin-angular2-annotations</a> A plugin for building Angular 2 app with Babel. It supports TypeScript-like method parameter decorators by monkey-patching Babylon.</li>\n</ul>\n"},{"layout":"post","title":"Assign Time/time string in UTC to ActiveRecord date attribute","date":"2015-03-02 20:58","comments":true,"categories":["Ruby","Rails"],"url":"/blog/2015/03/02/date-timezone/","content":"<p><strong>TL;DR: <code>gem &#39;date_timezone&#39;</code> in <code>Gemfile</code> and <code>include DateTimezone</code> in ActiveRecord models if you are on the east side of the prime meridian.</strong></p>\n<p>ActiveRecord is great. It automatically converts data <a href=\"https://github.com/rails/rails/tree/v4.2.0/activerecord/lib/active_record/type\">according to the type of database column</a>. That&#39;s why we can throw request params, whose values are often strings, into mass assignment methods like <code>create</code> and <code>update</code> without manual conversion. The conversion works perfectly in most of the cases except for <code>date</code> attribute.</p>\n<p>To <code>date</code> attribute, we can assign <code>Date</code> and date string like <code>&#39;2015-03-02&#39;</code> without any problem. However, <code>Time</code> and time string with different time zone, usualy UTC, don&#39;t work well here. Their own time zones are not taken into account when converted to <code>Date</code>.</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Application</span> &lt; Rails::Application</span>\n  config.time_zone = <span class=\"hljs-string\">'Tokyo'</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> &lt; ActiveRecord::Base</span>\n  <span class=\"hljs-comment\"># birth_date :date</span>\n<span class=\"hljs-keyword\">end</span>\n\nexpect(Person.new(<span class=\"hljs-symbol\">birth_date:</span> <span class=\"hljs-string\">'2015-03-02'</span>).birth_date).to eq(Date.new(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>))\nexpect(Person.new(<span class=\"hljs-symbol\">birth_date:</span> Date.new(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>)).birth_date).to eq(Date.new(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>))\nexpect(Person.new(<span class=\"hljs-symbol\">birth_date:</span> Time.zone.local(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>)).birth_date).to eq(Date.new(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>))\n\n<span class=\"hljs-comment\"># But...</span>\nexpect(Person.new(<span class=\"hljs-symbol\">birth_date:</span> Time.utc(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">15</span>)).birth_date).to eq(Date.new(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>))\nexpect(Person.new(<span class=\"hljs-symbol\">birth_date:</span> <span class=\"hljs-string\">'2015-03-01T15:00:00.000Z'</span>).birth_date).to eq(Date.new(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>))</code></pre><p>There may be several cases that we have to assign <code>Time</code> or time string in different time zone to <code>date</code> attribute. My own case was a Single Page Application built with AngularJS that sends JavaScript&#39;s <code>Date</code> object to Rails API. JavaScript&#39;s <code>JSON.parse()</code> serializes <code>Date</code> into a string of ISO 8601 format in UTC time zone. This is problematic to the people on the east side of the prime meridian because they get different date when they express their beginning of date in UTC.</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">JSON</span>.stringify({ <span class=\"hljs-attr\">date</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">3</span> - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>) });\n<span class=\"hljs-comment\">// '{\"date\":\"2015-03-01T15:00:00.000Z\"}'</span></code></pre><p>I could have controlled front-end code to always send date string like <code>&#39;2015-03-02&#39;</code> or converted the ISO 8601 string with <code>Time.zone.parse</code> in Rails controllers. But those approaches seemed error prone. I wanted to take care of it at the bottom, ActiveRecord model. I created a concern to override <code>date</code>-column mutators like the following. It converts <code>Time</code> and time string to <code>TimeWithZone</code> with the application&#39;s time zone.</p>\n<pre><code class=\"hljs \">def birth_date=(value)\n  self[:birth_date] = case value\n                      when String then Time.zone.parse(value)\n                      when Time then value.in_time_zone\n                      else value\n                      end\nend</code></pre><p>The concern was extracted as a gem, <a href=\"https://github.com/shuhei/date_timezone\">date_timezone</a>.</p>\n<pre><code class=\"hljs Gemfile\">gem 'date_timezone'</code></pre><pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> &lt; ActiveRecord::Base</span>\n  <span class=\"hljs-keyword\">include</span> DateTimezone\n\n  <span class=\"hljs-comment\"># birth_date :date</span>\n<span class=\"hljs-keyword\">end</span></code></pre><p>If you are creating Rails application on the east side of the prime meridian and in trouble with the same issue as mine, please try it and share what you think.</p>\n"},{"layout":"post","title":"Playing with vanilla WebGL API","date":"2015-02-15 16:21","comments":true,"categories":["JavaScript","WebGL"],"url":"/blog/2015/02/15/playing-with-vanilla-webgl-api/","content":"<p>Started writing in English on a whim.</p>\n<p>I&#39;ve been learning vanilla WebGL with <a href=\"https://github.com/stackgl/webgl-workshop\">webgl-workshop</a> since the last weekend. It took some time for me to understand concepts like array buffer and element buffer but it was fun to learn the basics that we stand on.</p>\n<p>The team behind <a href=\"https://github.com/stackgl/webgl-workshop\">webgl-workshop</a> creates a set of utility modules called <a href=\"http://stack.gl/\"><code>stackgl</code></a>. It embraces the UNIX philosophy, &quot;Write programs that do one thing and do it well.&quot; Even though the workshop doesn&#39;t use <code>stackgl</code> libraries, I liked the way the exercises were organized as small modules.</p>\n<p>Before moving to another workshop module, <a href=\"https://github.com/stackgl/shader-school\">shader-school</a>, I ported my old openFrameworks experiment with vanilla WebGL and Audio User Media in order to check if I could use what I learned so far.</p>\n<p><a href=\"/blurred-cube\"><img src=\"/images/blurred-cube-webgl.png\" alt=\"Blurred Cube\"></a></p>\n<p><a href=\"/blurred-cube\">Blurred Cube</a></p>\n<p>The hardest part was randomly moving the cube&#39;s edges. Because I couldn&#39;t randomly move vertices on the array buffer, I had to rewrite buffer data frame by frame. It might be inefficient, but it works well on my laptop at least.</p>\n<h2 id=\"steps-for-drawing-with-webgl\">Steps for drawing with WebGL</h2>\n<p>The exercises on <a href=\"https://github.com/stackgl/webgl-workshop\">webgl-workshop</a> split steps into two phases, <code>init</code> and <code>draw</code>, like <a href=\"https://processing.org/\">Processing</a>. Here I leave a note on general steps in them for later use.</p>\n<h3 id=\"init\">Init</h3>\n<ol>\n<li>Compile shaders and link them into a program. If you have attributes in vertex shader, don&#39;t forget to set attribute location before linking. If you have uniforms, get their locations after linking for later use.</li>\n<li>Create buffers and assign data to them.</li>\n<li>Create element buffers and assign data to them if necessary.</li>\n<li>Create textures and assign data to them if necessary. You can use textures in fragment shader via texture unit number as uniform.</li>\n</ol>\n<h3 id=\"draw\">Draw</h3>\n<ol>\n<li>Use program, assign data to uniforms. If they don&#39;t change frame by frame, you can do this in the setup phase.</li>\n<li>Bind buffer. If you have only one buffer, you may have done this in the setup phase.</li>\n<li>Draw arrays or elements.</li>\n</ol>\n"}],"prevPage":"/blog/pages/6/","title":"Page 7 - Shuhei Kagawa","nextPage":"/blog/pages/8/"}