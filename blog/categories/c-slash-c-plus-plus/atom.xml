<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C/C++ | Blog]]></title>
  <link href="http://shuheikagawa.com/blog/categories/c-slash-c-plus-plus/atom.xml" rel="self"/>
  <link href="http://shuheikagawa.com/"/>
  <updated>2013-12-09T20:25:39+09:00</updated>
  <id>http://shuheikagawa.com/</id>
  <author>
    <name><![CDATA[Shuhei Kagawa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iPhone で OpenFrameworks]]></title>
    <link href="http://shuheikagawa.com/blog/2009/08/02/openframeworks-on-iphon/"/>
    <updated>2009-08-02T20:41:00+09:00</updated>
    <id>http://shuheikagawa.com/blog/2009/08/02/openframeworks-on-iphon</id>
    <content type="html"><![CDATA[<p>二次元で Strange Attractor 的なものをつくってみました。パーティクルの点描ではなく軌跡を描いています。</p>

<p><a href="http://www.flickr.com/photos/branchiopoda/3780153165/" title="Attractor2D by shuhei kagawa, on Flickr"><img src="http://farm4.static.flickr.com/3479/3780153165_68805a6ef5.jpg" width="269" height="500" alt="Attractor2D" /></a></p>

<p>Processing と全く同じような感じで書けるので、よけいなことに労力を費やさずにすみます。今後 iPhone で OpenFrameworks を使って行くならば、UIKit との組み合わせ方と、審査が通るかどうかを調べなければいけませんね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenGL のブレンディング方法について]]></title>
    <link href="http://shuheikagawa.com/blog/2009/08/02/blending-of-openg/"/>
    <updated>2009-08-02T19:03:00+09:00</updated>
    <id>http://shuheikagawa.com/blog/2009/08/02/blending-of-openg</id>
    <content type="html"><![CDATA[<p>OpenFrameworks が iPhone 上で動くというので、触ってみています。ついこの前、Objective-C やりますと書きましたが、最近 C++ がマイブームなので・・・。</p>

<p>そこで調べてみた OpenGL のブレンディングについてメモ。一言で言うと、ブレンディングとは画像に画像を合成することです。Photoshopなどでは、レイヤーとレイヤーの画像の合成の方法をブレンドモードと言っていますね。OpenGL では自分で書く訳ですから、ブレンディングの方法をさらに柔軟に指定できます。</p>

<p>h3. まずは有効に</p>

<p>ブレンディングを有効にするには以下の関数を呼ばなければなりません。</p>

<p>pre(prettyprint). glEnable(GL_BLEND);</p>

<p>h3. 設定関数</p>

<p>ブレンドする二つの画像を source と destination とします。OpenGLでは、これから描くのがsource、destinationはフレームバッファ上の画像だそうです。</p>

<p>h4. glBlendFunc</p>

<p>@glBlendFunc@ では、それぞれの画像の RGBA にかける係数を設定します。下記は一例です。</p>

<ul>
<li>@GL_ONE@　RGBA 全てを0にする</li>
<li>@GL_ZERO@　RGBA 全てそのまま</li>
<li>@GL_SRC_ALPHA@　RGBA 全てに source のAをかける</li>
</ul>


<p>h4. glBlendEquation</p>

<p>@glBlendEquation@ では、画像同士のRGBAを合成する方法を設定します。</p>

<ul>
<li>@GL_FUNC_ADD@ 足す</li>
<li>@GL_FUNC_SUBTRACT@ sourceからdestinationを引く</li>
<li>@GL_FUNC_REVERSE_SUBTRACT@ destinationからsourceを引く</li>
<li>@GL_MAX@ 大きい方をそのまま使う</li>
<li>@GL_MIN@ 小さい方をそのまま使う</li>
</ul>


<p>h4. その他</p>

<p>iPhone では @glBlendEquation@ ではなく @glBlendEquationOES@ を使いますが、働きは同じもののようです。また @glBlendFunc@ や @glBlendEquation@ では RGBA 全てを一緒に設定しますが、 @glBlendFuncSeparate@ や @glBlendEquationSeparate@ を用いると RGB と Alpha を別々に設定できるようです。</p>

<p>h3. 実例</p>

<p>h4. Additive blending</p>

<p>光の表現に。暗めの色を重ねていくと、ぼんやりと光るようないい感じになります。</p>

<p>pre(prettyprint). glBlendEquationOES(GL_FUNC_ADD);  // デフォルトは GL_FUNC_ADD のようで必要ないかも
glBlendFunc(GL_ONE, GL_ONE);
// glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_COLOR); // こっちの方がいい感じになるとか・・・。</p>

<p>h4. フェードアウト</p>

<p>もっといい方法があるかもしれませんが、他にやり方が思いつかなかったので。</p>

<p>pre(prettyprint).. glBlendEquationOES(GL_FUNC_REVERSE_SUBTRACT_OES);  // 暗くするため、元画像から引く
glBlendFunc(GL_ONE, GL_ONE);  // そのまま
ofSetColor(10, 10, 10, 0);  // 少しずつ暗くします
ofRect(0, 0, ofGetWidth(), ofGetHeight());  // 画面全体に適用します</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[const とポインタ]]></title>
    <link href="http://shuheikagawa.com/blog/2009/08/01/const-and-pointe/"/>
    <updated>2009-08-01T14:45:00+09:00</updated>
    <id>http://shuheikagawa.com/blog/2009/08/01/const-and-pointe</id>
    <content type="html"><![CDATA[<p>下のように @const@ は型名の前後どちらに書いても同じです。</p>

<p>pre(prettyprint). const int a = 1;
int const b = 2;</p>

<p>&ldquo;Bjarne Stroustrup&rsquo;s C++ Style and Technique FAQ&rdquo;:<a href="http://www.research.att.com/~bs/bs_faq2.html#constplacement">http://www.research.att.com/~bs/bs_faq2.html#constplacement</a> では、前者がわかりやすくおすすめとされていますが。</p>

<p>では、ポインタについてはどうでしょうか？</p>

<p>pre(prettyprint). const int<em> pa = new int(10);  // &ldquo;const な int&rdquo; へのポインタ
int const</em> pb = new int(11);  // &ldquo;const な int &rdquo; へのポインタ
int* const pc = new int(12);  // int への  &ldquo;const なポインタ&rdquo;</p>

<p>一つ目と二つ目は同じです。では、どのような挙動になるのでしょうか？</p>

<p>pre(prettyprint).. // <em>pa = 20;  // エラー！ &ldquo;const な int&rdquo; の値を変えることはできない
// </em>pb = 21;  // エラー！ &ldquo;const な int&rdquo; の値を変えることはできない
*pc = 23;</p>

<p>delete pa;   // delete はできる
delete pb;   // delete はできる
delete pc;</p>

<p>pa = NULL;
pb = NULL;
// pc = NULL;  // エラー！ポインタ自体が const なため</p>

<ol type="a">
<li>というような感じになります。普通は @const int* pa@ の方を使う機会が多いような気がしますね。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode での Google Test のビルド]]></title>
    <link href="http://shuheikagawa.com/blog/2009/07/26/build-google-test-on-xcod/"/>
    <updated>2009-07-26T23:30:00+09:00</updated>
    <id>http://shuheikagawa.com/blog/2009/07/26/build-google-test-on-xcod</id>
    <content type="html"><![CDATA[<p>Subversion から落としてこないと、「Version.h がないよ」と言われてビルドできないようです。
Google Code のサイトから落としてきた tar.gz ではダメでした。</p>

<p>たしかに &ldquo;GoogleTestXcodeGuide&rdquo;:<a href="http://code.google.com/p/googletest/wiki/GoogleTestXcodeGuide">http://code.google.com/p/googletest/wiki/GoogleTestXcodeGuide</a> には Subversion から落としてね、と書いてあります。
Subversion からでないとダメとは書いてありませんが、文句は言えませんね。</p>
]]></content>
  </entry>
  
</feed>
