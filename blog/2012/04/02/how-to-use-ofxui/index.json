{"site":{"title":"Shuhei Kagawa","author":"Shuhei Kagawa","perPage":3,"newPageExtension":"markdown","blogDir":"blog","sourceDir":"source","layoutDir":"_layouts","postDir":"_posts","cssFiles":["node_modules/highlight.js/styles/monokai-sublime.css","source/_css/style.css"]},"post":{"layout":"post","title":"How to use ofxUI","published":true,"date":"2012-04-02 20:13","comments":true,"tags":null,"categories":["openFrameworks"],"url":"/blog/2012/04/02/how-to-use-ofxui/","content":"<iframe src=\"//player.vimeo.com/video/36385123\" width=\"700\" height=\"525\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\n<p><a href=\"http://www.syedrezaali.com/blog/?p=2172\">ofxUI: A User Interface Addon for OF</a> を使うと openFrameworks に <a href=\"https://github.com/ofTheo/ofxControlPanel\">ofxControlPanel</a> よりもちょっとかっこいい UI を追加することができます。<a href=\"https://github.com/rezaali/ofxUI\">github のページ</a> の Readme を超訳してみました。</p>\n<p>1. <a href=\"https://github.com/rezaali/ofxUI/downloads\">ダウンロードページ</a>から ofxUI をダウンロード。中の <code>src</code> を <code>of/addons</code> の中に移して、名前を <code>ofxUI</code> にします。残りは <code>of/apps</code> に移して <code>ofxUIExamples</code> などとします。すると以下のようなファイル構成になります。</p>\n<pre><code class=\"hljs \">    of\n    |--- addons\n    |    |--- ofxUI\n    |         |--- ofxUI.h\n    |         |--- ...\n    |\n    |--- apps\n    |    |--- addonExamples\n    |    |--- examples\n    |    |--- myapps\n    |    |--- ofxUIExamples\n    |         |--- example-ofxUIAllWidgets\n    |         |--- ...\n    |--- …</code></pre><p>2. <code>of/apps/examples/emptyExample</code> を <code>of/apps/myapps</code> 以下にコピーして新しいプロジェクトを作ります。</p>\n<p>3. 新しく作ったプロジェクトを Xcode で開きます。</p>\n<p>4. Xcode の左側の <code>addons</code> のところに Finder から <code>of/addons/ofxUI</code> をドラッグアンドドロップします。</p>\n<p>5. &quot;Choose options for adding these files&quot; と聞かれたら、何もせず &quot;finish&quot; を押します。<code>of/addons/ofxXmlSettings</code> も同様に Xcode の <code>addons</code> フォルダに追加。このアドオンは XML ファイルに設定を保存して読み出すのに使われます。</p>\n<p>6. Finder で <code>of/apps/ofxUIExamples/example-ofxUIAllWidgets/bin/data/GUI</code> をコピーし、プロジェクトの <code>bin/data</code> に入れます。</p>\n<p>7. アプリのヘッダファイル（testApp.h）で &quot;ofxUI.h&quot; を include します。</p>\n<p>8. ヘッダに続けて以下の変数と関数を追加。</p>\n<pre><code class=\"hljs cpp\">ofxUICanvas *gui;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">exit</span><span class=\"hljs-params\">()</span></span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">guiEvent</span><span class=\"hljs-params\">(ofxUIEventArgs &amp;e)</span></span>;</code></pre><p>9. 実装ファイルにメソッドを追加します。</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">void</span> testApp::<span class=\"hljs-built_in\">exit</span>()\n{\n\n}\n\n<span class=\"hljs-keyword\">void</span> testApp::guiEvent(ofxUIEventArgs &amp;e)\n{\n\n}</code></pre><p>10. <code>setup()</code> の中で初期化。引数は GUI の左上の点の座標と幅と高さです。</p>\n<pre><code class=\"hljs cpp\">gui = <span class=\"hljs-keyword\">new</span> ofxUICanvas(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">320</span>,<span class=\"hljs-number\">320</span>);          <span class=\"hljs-comment\">//ofxUICanvas(float x, float y, float width, float height)</span></code></pre><p>11. <code>exit()</code> はアプリの終了前に呼ばれます。ここでは設定の保存と gui オブジェクトの破棄を行います（変数がポインタなので参照先を解放しないとメモリリーク）。</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">void</span> testApp::<span class=\"hljs-built_in\">exit</span>()\n{\n  gui-&gt;saveSettings(<span class=\"hljs-string\">\"GUI/guiSettings.xml\"</span>);    \n  <span class=\"hljs-keyword\">delete</span> gui;\n}</code></pre><p>12. GUI にウィジェット（UI 部品のこと）を追加する。最後から二番目の行は、リスナー／コールバックを追加することで、ウィジェットがユーザに操作されたときに何をすればいいか GUI に教えています。よくわからなくても気にしない。また、最後の行は GUI に XML に保存された設定を読み込んでいます。ファイルがなければ、ウィジェットのデフォルトの値が使用されます。</p>\n<pre><code class=\"hljs cpp\">gui-&gt;addWidgetDown(<span class=\"hljs-keyword\">new</span> ofxUILabel(<span class=\"hljs-string\">\"OFXUI TUTORIAL\"</span>, OFX_UI_FONT_LARGE));\ngui-&gt;addWidgetDown(<span class=\"hljs-keyword\">new</span> ofxUISlider(<span class=\"hljs-number\">304</span>,<span class=\"hljs-number\">16</span>,<span class=\"hljs-number\">0.0</span>,<span class=\"hljs-number\">255.0</span>,<span class=\"hljs-number\">100.0</span>,<span class=\"hljs-string\">\"BACKGROUND VALUE\"</span>));\nofAddListener(gui-&gt;newGUIEvent, <span class=\"hljs-keyword\">this</span>, &amp;testApp::guiEvent);\ngui-&gt;loadSettings(<span class=\"hljs-string\">\"GUI/guiSettings.xml\"</span>);</code></pre><p>13. ユーザが UI を操作したときに呼ばれます。操作されたウィジェットに関する処理を書きましょう。</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">void</span> testApp::guiEvent(ofxUIEventArgs &amp;e)\n{\n    <span class=\"hljs-keyword\">if</span>(e.widget-&gt;getName() == <span class=\"hljs-string\">\"BACKGROUND VALUE\"</span>)    \n    {\n        ofxUISlider *slider = (ofxUISlider *) e.widget;   \n        ofBackground(slider-&gt;getScaledValue());\n    }  \n}</code></pre><p>14. フルスクリーンモードとウィンドウモードを切り替えるためにトグルを追加します。<code>setup()</code> メソッドの中で他のウィジェットの後に以下を追加。もしこれをもうひとつの <code>addWidgetDown</code> の呼び出しの前に書けば、トグルはスライダーの上に置かれます。</p>\n<pre><code class=\"hljs cpp\">gui-&gt;addWidgetDown(<span class=\"hljs-keyword\">new</span> ofxUIToggle(<span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">32</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">\"FULLSCREEN\"</span>));</code></pre><p>15. &quot;FULLSCREEN&quot; トグルウィジェットに対応するため、<code>guiEvent</code> メソッドにもう一つ機能を追加します。結局のところ、こんな風に見えるはず。</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">void</span> testApp::guiEvent(ofxUIEventArgs &amp;e)\n{\n    <span class=\"hljs-keyword\">if</span>(e.widget-&gt;getName() == <span class=\"hljs-string\">\"BACKGROUND VALUE\"</span>)\n    {\n        ofxUISlider *slider = (ofxUISlider *) e.widget;   \n        ofBackground(slider-&gt;getScaledValue());\n    }\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(e.widget-&gt;getName() == <span class=\"hljs-string\">\"FULLSCREEN\"</span>)\n    {\n        ofxUIToggle *toggle = (ofxUIToggle *) e.widget;\n        ofSetFullscreen(toggle-&gt;getValue());\n    }   \n}</code></pre><p>こんな感じで他のウィジェットを置いて操作できるようにすることができます。</p>\n<p>サンプルコードを見れば、もっと複雑なウィジェットの使い方をしらべることもできます。ここで紹介したコードもサンプルコードの中に入っているので、わからなくなったら見てみるとよいでしょう。</p>\n"}}