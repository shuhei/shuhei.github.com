<?xml version="1.0" encoding="utf-8" ?><rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom"><channel><title>Shuhei Kagawa</title><link>https://shuheikagawa.com</link><atom:link href="https://shuheikagawa.com/blog/feed/rss.xml" rel="self" type="application/rss+xml"></atom:link><description>Shuhei Kagawa's blog</description><language>en-US</language><lastBuildDate>Wed, 13 Jan 2021 23:00:00 GMT</lastBuildDate><item><title>2020 in Review</title><link>https://shuheikagawa.com/blog/2021/01/13/2020-in-review/</link><description><![CDATA[
<p><span class="responsive-image-wrapper"><span class="responsive-image-outer" style="max-width: 1886px;"><span class="responsive-image-inner" style="padding-top: 74.97348886532343%;"><img class="responsive-image" src="/images/2020-park-yellow-leaves.jpg" alt="Park with yellow leaves"></span></span></span></p>
<p>It&#39;s already been two weeks in 2021, but I&#39;ll write anyway in the spirit of better late than never.</p>
<p>2020 was finally over. It was a weird year. Time flies, but things that happened feels like a long time ago.</p>
<h2 id="work">Work</h2>
<p>I had been working in the same area as before at Zalando, but there were good changes. My team&#39;s structure changed a bit and welcomed new members. It was refreshing to help a brand new product. I was promoted and exposed to new perspectives even though I left the new role before fully embracing it. More close collaboration with colleagues in Dublin happened thanks to the remote work as the default.</p>
<p>At the end of November, <a href="/blog/2020/11/30/4-years-at-zalando/">I left Zalando</a> where I met wonderful colleagues and friends. The four years there became an important part of my life.</p>
<p>After a week of vacation, I started a new job at Google. I am currently working remotely from Berlin but will eventually relocate to Zurich when the situation improves. My current plan is to move at the end of March, but we never know.</p>
<p>This job change took longer than I thought. I applied in February and got a result in June, but most of the positions were canceled due to COVID-19. It took a few more months to find a team to join. I got an offer at the end of August.</p>
<p>A new job means a lot of learning. Now I&#39;m experiencing how it feels to join a new place. I haven&#39;t had this feeling for a while. I tended to think that software engineers should thrive on depths, but I missed that we needed an overview before pursuing depths.</p>
<p>I just finished an onboarding program. I&#39;m excited to catch up and start contributing to real projects.</p>
<h2 id="wfh">WfH</h2>
<p>I had been working from home 100% since February. I liked to go to the office and talk to colleagues in person, but I also like working from home.</p>
<p>It didn&#39;t take long to adapt to working remotely. We were already working cross-location with Dublin and Helsinki using online collaboration tools like GitHub, Google Meet/Chat/Docs. It became even easier to attend meetings than before. Instead of climbing upstairs to go to a meeting room, meetings are only a few clicks away.</p>
<p>The problem was physical equipment. I didn&#39;t realize that the office equipment was very nice before starting WfH. I bought tons of things to set up a comfortable home office—I may write more about this later.</p>
<p>No commuting meant time-saving. I had been spending at least one and a half hours every day commuting. This was huge. At the same time, I lost a good chance of exercise. I try to walk outside every day, but my physical activities drastically decreased.</p>
<h2 id="computer-science">Computer Science</h2>
<p>It was fun to learn and practice algorithms and data structures for interview preparation. I solved about 300 Medium/Hard LeetCode problems in two months. Before 2020, I had been learning them with books and Coursera courses, but knowing and doing are two different things. Solving problems shed light on what I didn&#39;t fully understand. I studied topics that I was stuck—graphs, dynamic programming, string searching, well, most of them!</p>
<p>After the interviews, I still wanted to learn more. Someone on Twitter tweeted about <a href="https://teachyourselfcs.com/">Teach Yourself Computer Science</a>. I started with <em>Operating Systems: Three Easy Pieces</em> because it looked easy to read—and it was. Then I moved on to <em>Computer Systems: A Programmer&#39;s Perspective</em>. The book is more textbook-ish than OSTEP. But I found it fun to learn things that I hadn&#39;t taken a deeper look at—the binary representation of floating-point numbers, assembly, processors, etc.</p>
<h2 id="travel">Travel</h2>
<p>Before COVID-19 started, I traveled to Granada, Spain in January. It&#39;s a city of Alhambra—and free tapas. The city&#39;s bars give you tapas as long as you order drinks. Seafood and Jamón ibérico were so good.</p>
<p>In September between the two lockdowns of the spring and the winter, I visited Goslar, Quedlinburg, and Düsseldorf in Germany to use too many vacation days left. Goslar and Quedlinburg were beautiful. As a substitute for a trip to Japan, I ate Japanese food extravagantly in Düsseldorf. My favorite restaurant was Hyuga. It felt like being at an <em>izakaya</em> in Tokyo. Shochiku, a Japanese supermarket, had a fish counter where you can ask them to cut sashimi. I took it out and ate in the hotel room. So good.</p>
<h2 id="food--drinks">Food &amp; Drinks</h2>
<p>I had rarely used food deliveries before 2020. But yes, I did it this time. My favorite dishes have been Tacos and Korean fried chicken. Also, many restaurants started take-away. I had never imagined taking out <em>ramen</em> before 2020.</p>
<p>I kept drinking bubble tea. Dosha in Friedrichshain is my favorite in Berlin so far. In addition to authentic Taiwanese tea, they have waffles with Tapioca inside!</p>
<p>Then, winter came. Even though warm bubble tea is nice, it became tedious to go out on the cold street to grab drinks. I finally got an entry-level espresso machine and a hand grinder. My less educated taste is already satisfied with it. Let&#39;s see if I can make some latte art in 2021.</p>
<h2 id="books">Books</h2>
<p>I bought 42 books or so but finished only a few non-tech books. Much less than I thought. One was <em>Into The Wild</em>. The others were two volumes about fermented beans, <em>natto</em> in Japanese, around the world even though I&#39;m scared of its smell and haven&#39;t tried it yet.</p>
<p>I want to read more in 2021. I will cut the time on social media and read books instead. If you want to see the progress and my ever-growing <em>Tsundoku</em> collection, here is <a href="https://www.goodreads.com/user/show/57764964-shuhei-kagawa">my Goodreads account</a>.</p>
<h2 id="2021">2021</h2>
<p>I&#39;ll move to another country this year. We can&#39;t socialize in person under the current circumstances, but you know, remote meetings are a few clicks away ;)</p>
<p><span class="responsive-image-wrapper"><span class="responsive-image-outer" style="max-width: 1886px;"><span class="responsive-image-inner" style="padding-top: 74.97348886532343%;"><img class="responsive-image" src="/images/2020-station.jpg" alt="A station in Berlin"></span></span></span></p>

]]></description><pubDate>Wed, 13 Jan 2021 23:00:00 GMT</pubDate><guid isPermaLink="false">https://shuheikagawa.com/blog/2021/01/13/2020-in-review/</guid></item><item><title>4 Years at Zalando</title><link>https://shuheikagawa.com/blog/2020/11/30/4-years-at-zalando/</link><description><![CDATA[
<p><span class="responsive-image-wrapper"><span class="responsive-image-outer" style="max-width: 1024px;"><span class="responsive-image-inner" style="padding-top: 75%;"><img class="responsive-image" src="/images/2020-spree.jpg" alt="Spree in November, 2020"></span></span></span></p>
<p>I&#39;m leaving Zalando with fond memories after 4 years. Here I&#39;m writing down my experience. It&#39;s never comprehensive, but I hope some people find it interesting!</p>
<h2 id="beginning">Beginning</h2>
<p>I had lived mostly in Japan for 34 years until 2016. I wanted to travel more, but I was lazy. I decided to work abroad so that I could travel while earning money.</p>
<p>A job-matching website called <a href="https://www.honeypot.io/">Honeypot</a> introduced me to Zalando. I had 5 interviews and got an offer for Senior Software Engineer (Frontend). I accepted the offer without looking into any other companies because I liked the interviewers and the company&#39;s OSS projects looked interesting. (Honeypot was very happy about it. They put me on their top page and <a href="https://blog.honeypot.io/japanese-developer-in-berlin/">an interview blog post</a>.)</p>
<p>I moved from Tokyo to Berlin and joined Zalando in October 2016. With 200 other newbies in a month! Zalando is a fashion e-commerce company that sells shoes, clothes, etc. on its website. I had no clue why they needed so many people at the beginning. Isn&#39;t it a website in the end? I later learned that the visible part of the website was the tip of the iceberg. There were many more areas like wholesale, brand relationship, pricing, warehouse management, shipping, payment, and so on.</p>
<h2 id="teams">Team(s)</h2>
<p>In 2016, Zalando was hiring software engineers with <em>pool hiring</em>. We were hired without specific teams to join. After a month of onboarding, each newbie was offered two departments to choose from. I chose the Catalog and Navigation team in the Fashion Store, the e-commerce website of Zalando.</p>
<p>For the first few months, I thought that the company was providing free beer to employees because fridges were always full of beer bottles even if we drank them a couple of times a week. I later learned that the beer was provided by the delivery lead and the product owner of the team. I joined the right team.</p>
<p>Aside from the beer, I liked the team. We worked together and played together. It was multi-cultural and magically bonded. It was an old team, but several members including me joined the team in late 2016. We learned the German language and explored the city of Berlin. We had BBQs in a park and drank vodka playing games in the office. It felt like a youth again. Some of the teammates were actually young. After two years or so, we stopped drinking as much as we did. We all became grown-ups...? Maybe.</p>
<p>Through re-organizations, the shape of the team has changed. It was split into multiple teams. Some people left and new people joined. But I stayed in the same area more or less.</p>
<h2 id="frontend-engineer">Frontend Engineer...?</h2>
<p>At Zalando, Frontend Engineers were more like JavaScript Fullstack Engineers.</p>
<p>In 2016, Zalando had a slogan &quot;Radical Agility&quot;. It promoted team autonomy and Microservices to support it. Each engineering team was supposed to operate what they built on top of the <a href="https://stups.io/">STUPS</a> infrastructure. Frontend was not an exception. <a href="https://www.mosaic9.org/">Mosaic</a> (frontend-microservices architecture) allowed each product team to own their Node.js servers for data aggregation and React server-side rendering in addition to frontend components.</p>
<p>The team&#39;s responsibilities were broad. Building new features and UI improvements with A/B testing, contributing to shared UI components, web performance optimization, Node.js server operations, 24x7 on-call, writing post mortems, and so on.</p>
<p>In <a href="https://engineering.zalando.com/posts/2018/12/front-end-micro-services.html">the new architecture that the Fashion Store is moving to</a>, product teams don&#39;t need to maintain Node.js servers. I would miss the burden, but I think it&#39;s a good thing.</p>
<h2 id="operation-and-reliability">Operation and Reliability</h2>
<p>I had a good opportunity to work on Node.js servers with serious traffic and business impact. Before joining Zalando, I had worked only on products that didn&#39;t take off or were just taking off. I didn&#39;t have much experience in scaling, monitoring, etc. But writing post mortems became one of my favorite activities after 4 years.</p>
<p>When my team migrated one of Zalando&#39;s most frequently visited pages to the microservice architecture, our journey in this area started. Even among frontend engineers in the team, some of them were frontendy—good at UI—and some of them were backendy. I was a backendy one and started looking into the topic. I found it interesting. It was a nice way to contribute to the team and the business.</p>
<p>I glimpsed SRE initiatives and Cyber Week preparation being set up and evolving. <a href="https://engineering.zalando.com/posts/2020/10/how-zalando-prepares-for-cyber-week.html">How Zalando prepares for Cyber Week</a> is a great overview of the evolution. I had a good chance to take part in it as a member of a product team. The people who formed the SRE team taught us monitoring, alerting, and reliability patterns (retry, circuit breaker, fallback, etc.). Incident response and post mortems were standardized. Then distributed tracing and <a href="https://www.usenix.org/conference/srecon19emea/presentation/mineiro">adaptive paging</a> were introduced.</p>
<p>Some of my contributions were reliability improvements of Node.js services. I researched <a href="(/blog/2017/05/13/http-request-timeouts-in-javascript/)">timeout mechanisms of Node.js HTTP client</a> and added a timeout feature to <a href="https://github.com/zalando-incubator/perron">an HTTP client library</a>. <a href="/blog/2019/04/30/dns-polling/">Built a mitigation strategy for DNS timeouts</a>, <a href="/blog/2018/12/29/histogram-for-time-series-metrics-on-node-js/">improved histogram metrics aggregation</a>, <a href="/blog/2018/09/16/node-js-under-a-microscope/">performed profiling and found interesting findings</a>—I had a chance to talk about it in front of a big audience including TC39 folks... I was nervous!</p>
<p>I was late to the Kubernetes train. The migration from STUPS to Kubernetes didn&#39;t get enough priority in my team. On the other hand, Zalando was an early adapter of Kubernetes and has been <a href="https://www.cncf.io/announcements/2020/08/20/cloud-native-computing-foundation-grants-zalando-the-top-end-user-award/">a strong contributor to the ecosystem</a>. I missed a good learning opportunity to dive into it and learn from the in-house experts.</p>
<h2 id="web-performance">Web Performance</h2>
<p>Another topic that I enjoyed was web performance optimization. It was especially rewarding because it directly contributes to customer experience and the e-commerce business. After my team worked on it, I had an opportunity to write a part of <a href="https://engineering.zalando.com/posts/2018/06/loading-time-matters.html">a blog post about the improvements</a>.</p>
<p>This topic keeps evolving. New metrics like <a href="https://web.dev/vitals/">Web Vitals</a> and more measurement/optimization techniques came out. It is one of the topics that I would want to pursue if I remained at Zalando.</p>
<h2 id="cross-team-collaboration">Cross-Team Collaboration</h2>
<p>I had a chance to work with many other teams in the Fashion Store and other departments. I met and worked with literally hundreds of colleagues. I had never worked with so many people before joining Zalando.</p>
<p>That meant more meetings and alignments. I learned decision making with writing. I still don&#39;t say that I&#39;m good at it, but Google Docs became my favorite editor next to Vim.</p>
<p>I learned that it can be fun to work with many teams. Sometimes it was frustrating because of the time consumed. But it was rewarding to meet with many colleagues and work together.</p>
<h2 id="career">Career</h2>
<p>I saw good examples of career paths. Before joining Zalando, I imagined only two paths for software engineers. Staying as a senior engineer (or a lead engineer) or becoming a manager. It was great to see another path, being a senior individual contributor who takes technical leadership. At Zalando, it&#39;s called Principal Engineer. In addition to technically lead projects, they shape the tech landscape of the company beyond the scope of a team.</p>
<p>I was fortunate enough to be promoted to Principal Engineer this year. A new role gave me new tasks and a new point of view. It&#39;s one of my regrets to leave this role prematurely.</p>
<h2 id="fun">Fun</h2>
<p>I had a lot of fun.</p>
<p>Lunch tours to Schlesisches Tor. Countless drinks at the office. After-drink burgers at Burgermeister. A team event on canoes. Summer BBQs in a park. Company parties with thousands of people and getting lost. <em>Mett</em> —German traditional breakfast of minced raw pork—with some beer in the office at 11 am. Ordering <em>Maß</em> at lunch and learning what it meant when 1L of beer arrived...</p>
<h2 id="next">Next</h2>
<p>It&#39;s been a fun journey. I&#39;m grateful for all the opportunities and learnings. If I went back to 2016, I would do it again.</p>
<p>I&#39;m going to start a new job tomorrow. I hope it will be fun as well!</p>

]]></description><pubDate>Mon, 30 Nov 2020 22:00:00 GMT</pubDate><guid isPermaLink="false">https://shuheikagawa.com/blog/2020/11/30/4-years-at-zalando/</guid></item><item><title>Switching color schemes of Vim and Alacritty</title><link>https://shuheikagawa.com/blog/2020/02/14/switching-colorschemes-of-vim-and-alacritty/</link><description><![CDATA[
<p>I like fountain pens and good notebooks. They spark joy when I write on paper. Computer terminals are like stationery. A good terminal setup makes it fun to work with computers. Here is how I improved colors on my terminal and made it easy to switch them depending on the time and the mood.</p>
<p><span class="responsive-image-wrapper"><span class="responsive-image-outer" style="max-width: 700px;"><span class="responsive-image-inner" style="padding-top: 63.714285714285715%;"><img class="responsive-image" src="/images/light-terminal.png" alt="Ayu Light for Vim and Alacritty"></span></span></span></p>
<h2 id="using-official-color-schemes">Using official color schemes</h2>
<p>I have been using Dracula color scheme on Vim and Alacritty for a while. I liked the colors, but I had a small problem with it on Vim. The pop-up of <code>coc.nvim</code> had the same color as the background color, and it was hard to distinguish a pop-up and the background.</p>
<p><span class="responsive-image-wrapper"><span class="responsive-image-outer" style="max-width: 700px;"><span class="responsive-image-inner" style="padding-top: 23.857142857142858%;"><img class="responsive-image" src="/images/vim-dracula-old.png" alt="dracula from flazz/vim-colorschemes"></span></span></span></p>
<p>I was using Dracula from <a href="https://github.com/flazz/vim-colorschemes">vim-colorschemes</a>, which hadn&#39;t been updated for three years. I tried <a href="https://github.com/dracula/vim">the official Dracula color scheme for Vim</a>. It had a different background color for pop-ups! Yes, it&#39;s subtle, but now I can distinguish pop-ups from the background.</p>
<p><span class="responsive-image-wrapper"><span class="responsive-image-outer" style="max-width: 700px;"><span class="responsive-image-inner" style="padding-top: 23.857142857142858%;"><img class="responsive-image" src="/images/vim-dracula-official.png" alt="dracula from dracula/vim"></span></span></span></p>
<p><a href="https://github.com/flazz/vim-colorschemes">vim-colorschemes</a> is a great way to try out different color schemes. You can get a random color scheme by <code>:colorscheme random</code>. But once you pick a few favorite ones, it&#39;s worth checking if they have official color schemes that are likely to be more maintained.</p>
<p>The same goes for Alacritty. I was using the Dracula color scheme that I converted with <a href="https://github.com/shuhei/colortty">my tool</a> from <a href="https://github.com/mbadolato/iTerm2-Color-Schemes">iTerm2-Color-Schemes</a> for Alacritty. Dracula has <a href="https://github.com/dracula/alacritty">its official Alacritty theme</a>, and it looks better!</p>
<h2 id="termguicolors">termguicolors</h2>
<p>I started trying other color schemes and found Vim&#39;s <code>termguicolors</code> option in <a href="https://github.com/ayu-theme/ayu-vim">ayu-vim</a>&#39;s README. It enables true colors (24-bit colors) instead of 256 colors (8-bit).</p>
<pre><code class="hljs vim"><span class="hljs-keyword">if</span> <span class="hljs-built_in">has</span>(<span class="hljs-string">'termguicolors'</span>)
  <span class="hljs-keyword">set</span> termguicolors
<span class="hljs-keyword">endif</span></code></pre><p>I turned it on, and the colors looked gorgeous! Before learning about <code>termguicolors</code>, I had tried light color schemes like Ayu Light and given up because of too low contrast (left in the following image). With <code>termguicolors</code>, light color schemes became finally usable!</p>
<p><span class="responsive-image-wrapper"><span class="responsive-image-outer" style="max-width: 700px;"><span class="responsive-image-inner" style="padding-top: 63.714285714285715%;"><img class="responsive-image" src="/images/vim-light-colorscheme.png" alt="ayu light in 256 colors and true colors"></span></span></span></p>
<h2 id="switching-color-schemes">Switching color schemes</h2>
<p>After trying dozens of color schemes, I picked the following:</p>
<ul>
<li><a href="https://github.com/ayu-theme/ayu-vim">Ayu</a> Light: Good in the morning or at a place with natural light.</li>
<li><a href="https://github.com/sts10/vim-pink-moon">Pink Moon</a></li>
<li><a href="https://github.com/arcticicestudio/nord-vim">Nord</a>: Low-contrast theme. Good in the night.</li>
</ul>
<p>I started switching color schemes depending on the time and the mood and bumped into a couple of issues. It was tedious to update the color schemes of Vim and Alacritty together. Also, I manage my <code>.alacritty.yml</code> and <code>.vimrc</code> in a git repository. It was annoying that the repository had unstaged changes every time I switched color schemes.</p>
<h2 id="solution">Solution</h2>
<h3 id="alacritty">Alacritty</h3>
<p>I decided to remove <code>.alacritty.yml</code> from the git repository and generate it out of a base template and color scheme files. Once I prepared a YAML file for each color scheme, it was quite easy with a one-liner.</p>
<pre><code class="hljs sh">cat alacritty/base.yml alacritty/<span class="hljs-variable">${color}</span>.yml &gt; .alacritty.yml</code></pre><h3 id="vim">Vim</h3>
<p>I could have generated <code>.vimrc</code>, but it felt weird because VimScript is a programming language. Instead of generating the whole <code>.vimrc</code>, I decided to generate a color scheme file <code>.vim/color.vim</code>, which is in <code>.gitignore</code></p>
<pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">'let ayucolor="light"\ncolorscheme ayu'</span> &gt; ~/.vim/color.vim</code></pre><p>and load it from <code>.vimrc</code>.</p>
<pre><code class="hljs vim"><span class="hljs-keyword">let</span> color_path = <span class="hljs-built_in">expand</span>(<span class="hljs-string">'~/.vim/color.vim'</span>)
<span class="hljs-keyword">if</span> <span class="hljs-built_in">filereadable</span>(color_path)
  exec <span class="hljs-string">'source'</span> color_path
<span class="hljs-keyword">else</span>
  <span class="hljs-comment">" Default color scheme</span>
  <span class="hljs-keyword">colorscheme</span> pink-moon
<span class="hljs-keyword">endif</span></code></pre><h3 id="putting-them-together">Putting them together</h3>
<p>Then, I created a shell script named <code>colorscheme</code> to switch color schemes of Vim and Alacritty together.</p>
<pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh
</span>
color=<span class="hljs-variable">$1</span>
dotfiles=~/dotfiles
alacritty=<span class="hljs-variable">${dotfiles}</span>/alacritty

<span class="hljs-function"><span class="hljs-title">configure_alacritty</span></span>() {
  cat <span class="hljs-variable">${alacritty}</span>/base.yml <span class="hljs-variable">${alacritty}</span>/<span class="hljs-variable">${color}</span>.yml &gt; <span class="hljs-variable">${dotfiles}</span>/.alacritty.yml
}

<span class="hljs-function"><span class="hljs-title">configure_vim</span></span>() {
  <span class="hljs-built_in">echo</span> <span class="hljs-variable">$1</span> &gt; <span class="hljs-variable">${dotfiles}</span>/.vim/color.vim
}

<span class="hljs-keyword">case</span> <span class="hljs-variable">$color</span> <span class="hljs-keyword">in</span>
  dracula)
    configure_alacritty
    configure_vim <span class="hljs-string">'colorscheme dracula'</span>
    ;;
  nord)
    configure_alacritty
    configure_vim <span class="hljs-string">'colorscheme nord'</span>
    ;;
  pink-moon)
    configure_alacritty
    configure_vim <span class="hljs-string">'colorscheme pink-moon'</span>
    ;;
  ayu-light)
    configure_alacritty
    configure_vim <span class="hljs-string">'let ayucolor="light"\ncolorscheme ayu'</span>
    ;;
  *)
    <span class="hljs-built_in">echo</span> <span class="hljs-string">"Supported colorschemes: dracula, nord, pink-moon, ayu-light"</span>
    <span class="hljs-built_in">exit</span> 1
    ;;
<span class="hljs-keyword">esac</span></code></pre><p>Now I can switch color schemes with only one command! (I still need to restart/reload open Vim sessions, but I can live with it.)</p>
<pre><code class="hljs sh">colorscheme ayu-light
colorscheme nord</code></pre><p>If you are curious about the full setup, check out <a href="https://github.com/shuhei/dotfiles">my dotfiles repo</a>.</p>
<h2 id="summary">Summary</h2>
<ul>
<li>Official color schemes may have more features than color scheme bundles</li>
<li>Enable <code>termguicolors</code> on Vim</li>
<li>Switch color schemes with a command!</li>
</ul>

]]></description><pubDate>Fri, 14 Feb 2020 23:15:00 GMT</pubDate><guid isPermaLink="false">https://shuheikagawa.com/blog/2020/02/14/switching-colorschemes-of-vim-and-alacritty/</guid></item><item><title>Goodbye, Textile</title><link>https://shuheikagawa.com/blog/2020/01/27/goodbye-textile/</link><description><![CDATA[
<p><a href="https://en.wikipedia.org/wiki/Textile_(markup_language">Textile</a> is a markup language that is similar to Markdown. This blog had had posts written in Textile for more than a decade—I feel old now! I removed the Textile files last weekend. This post is a memoir on the markup language.</p>
<p>I started using Textile on a blog engine called <a href="https://en.wikipedia.org/wiki/Textpattern">Textpattern</a>. I don&#39;t remember exactly when, but probably around 2004 or 2005. I was a university student. Movable Type was the most popular blog engine at the time, but it changed its license towards a more commercial one. Textpattern was a new open-source software. I fell in love with its minimalism. There were not many Textpattern users in Japan. Information in Japanese was very little if not none. I read documentation and forums in English and translated some into Japanese with a few fellows whom I had never met in person.</p>
<p>After a few years, Wordpress became a thing, or I realized it did. Even after I moved to Wordpress, I kept writing in Textile. I liked editing Textile more than editing rich text on WYSIWYG editor. I am not sure whether I had heard of Markdown at the time. But it was not as popular or dominant as it is now.</p>
<p>I started this blog with Textile on Wordpress in 2008 when I started my first job. And I migrated it to Octopress in 2012. I started writing in Markdown with Octopress because it was the lingua franca of GitHub where all the cool things were happening. I had a bit more than a hundred posts in Textile. I kept them in Textile because Octopress supported Textile as well. In 2014, I rebuilt this blog with a handmade static site generator using Gulp. I carried the old Textile files over. I even wrote <a href="https://github.com/shuhei/gulp-textile">gulp-textile</a> plugin, which was just a thin wrapper of <a href="https://github.com/borgar/textile-js">textile-js</a>. It was my first npm package.</p>
<p>Since then, I implemented a few Markdown-only features like syntax highlighting and responsive table in this blog. The outputs of Markdown and Textile diverged. Last weekend, I wanted to implement <a href="https://shuheikagawa.com/blog/2020/01/26/responsive-images-with-a-static-site-generator/">responsive images</a>. One more Markdown-only feature. Then I thought it was time to convert the Textile files to Markdown.</p>
<h2 id="converting-textile-to-markdown">Converting Textile to Markdown</h2>
<p>I didn&#39;t want to convert a hundred posts by hand. I had tried <a href="https://github.blog/2016-03-01-upgrading-your-textile-posts-to-markdown/">tomd</a> a few years ago, but I was not satisfied with the result. The old Textile files had raw HTML tags and some classes for styling. Also, I was afraid of missing some details that I don&#39;t remember anymore. So I decided to write a conversion script.</p>
<p>I used <a href="https://github.com/borgar/textile-js">textile-js</a> to parse Textile. It turned out that <code>textile-js</code> output HTML string or <a href="http://www.jsonml.org/">JsonML</a>. JsonML was new to me. It is basically HTML in JSON format. Each text node is represented as a string. Each element node is represented as an array whose first item is the tag name, an optional second item is an object of attributes and the rest are child nodes.</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://foo.com"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"foo.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"Foo"</span> /&gt;</span> Yay<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><pre><code class="hljs json">[
  <span class="hljs-string">"a"</span>,
  { <span class="hljs-attr">"href"</span>: <span class="hljs-string">"https://foo.com"</span> },
  [<span class="hljs-string">"img"</span>, { <span class="hljs-attr">"src"</span>: <span class="hljs-string">"foo.png"</span>, <span class="hljs-attr">"alt"</span>: <span class="hljs-string">"Foo"</span> }],
  <span class="hljs-string">" Yay"</span>
]</code></pre><p>I wrote a <code>switch</code> statement to handle tags and added tag handlers one by one.</p>
<pre><code class="hljs js"><span class="hljs-keyword">switch</span> (tag) {
  <span class="hljs-keyword">case</span> <span class="hljs-string">"img"</span>:
    <span class="hljs-keyword">return</span> <span class="hljs-comment">/* render &lt;img&gt; */</span>;
  <span class="hljs-keyword">case</span> <span class="hljs-string">"a"</span>:
    <span class="hljs-keyword">return</span> <span class="hljs-comment">/* render &lt;a&gt; */</span>;
  <span class="hljs-keyword">default</span>:
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`Unknown tag: <span class="hljs-subst">${tag}</span>`</span>);
}</code></pre><p>I also added <code>console.log</code> for unknown attributes. In this way, I was able to make sure that all tags and attributes were handled. <a href="https://github.com/shuhei/shuhei.github.com/pull/44">The script worked well to convert more than one hundred posts</a>. The full script is <a href="https://gist.github.com/shuhei/b622af9559d859d386edbfe43f171d72">on Gist</a>.</p>

]]></description><pubDate>Mon, 27 Jan 2020 22:20:00 GMT</pubDate><guid isPermaLink="false">https://shuheikagawa.com/blog/2020/01/27/goodbye-textile/</guid></item><item><title>Responsive Images with a Static Site Generator</title><link>https://shuheikagawa.com/blog/2020/01/26/responsive-images-with-a-static-site-generator/</link><description><![CDATA[
<h2 id="responsive-images">Responsive images</h2>
<p>An <code>img</code> without <code>width</code>/<code>height</code> attributes causes a page jump when it&#39;s loaded. It happens because the browser doesn&#39;t know the dimensions of the image until its data is loaded—only the first part that contains dimensions is enough though. It&#39;s common to specify <code>width</code> and <code>height</code> of <code>img</code> tag to avoid the jump.</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/images/foo.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"Foo"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"800"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"600"</span> /&gt;</span></code></pre><p>But <code>img</code> tag with <code>width</code> and <code>height</code> doesn&#39;t always work well with Responsive Design because the dimensions are fixed. I wanted images to fit the screen width on mobile phones. So I left images without <code>width</code>/<code>height</code> and let them cause page jumps.</p>
<p>Recently, I came across a similar problem at work and learned a cool technique to create a placeholder of the image&#39;s aspect ratio with <code>padding-top</code>. If the image&#39;s aspect ratio is <code>height/width = 75/100</code>:</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"position: relative; padding-top: 75%;"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"position: absolute; top: 0; left: 0; max-width: 100%;"</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><p>The <code>div</code> works as a placeholder with the image&#39;s aspect ratio that fits the width of its containing element. Because the <code>img</code> tag has <code>position: absolute</code>, it doesn&#39;t cause a page jump when it&#39;s loaded.</p>
<p>I decided to implement it on this blog. This blog is made with a custom static site generator. I&#39;m not sure if it&#39;s useful for anyone else, but I write how I did it anyway…</p>
<h2 id="limiting-overstretch">Limiting overstretch</h2>
<p>In addition to images that are wide enough to always fill the full width of the content area, I had images that are not wide enough to fill the full width of a laptop, but wide enough to fill the full width of a mobile phone. Not to stretch the image on laptops, I decided to go with another wrapper to limit the maximum width of the image. If the image&#39;s width is <code>500px</code>:</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"max-width: 500px;"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"position: relative; padding-top: 75%;"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"position: absolute; top: 0; left: 0; max-width: 100%;"</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><h2 id="getting-image-dimensions">Getting Image Dimensions</h2>
<p>The placeholder technique requires image dimensions. I used <a href="https://github.com/image-size/image-size">image-size module</a> to get image dimensions.</p>
<p>The following function gets dimensions of images in a directory and returns them as a <code>Map</code>.</p>
<pre><code class="hljs js"><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">"util"</span>);
<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">"path"</span>);
<span class="hljs-keyword">const</span> { <span class="hljs-attr">promises</span>: fs } = <span class="hljs-built_in">require</span>(<span class="hljs-string">"fs"</span>);
<span class="hljs-keyword">const</span> sizeOf = util.promisify(<span class="hljs-built_in">require</span>(<span class="hljs-string">"image-size"</span>).imageSize);

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readImageSizes</span>(<span class="hljs-params">dir</span>) </span>{
  <span class="hljs-keyword">const</span> files = (<span class="hljs-keyword">await</span> fs.readdir(dir)).filter(<span class="hljs-function"><span class="hljs-params">f</span> =&gt;</span> !f.startsWith(<span class="hljs-string">"."</span>));
  <span class="hljs-keyword">const</span> promises = files.map(<span class="hljs-keyword">async</span> file =&gt; {
    <span class="hljs-keyword">const</span> filePath = path.resolve(dir, file);
    <span class="hljs-keyword">const</span> dimensions = <span class="hljs-keyword">await</span> sizeOf(filePath);
    <span class="hljs-keyword">return</span> [file, dimensions];
  });
  <span class="hljs-keyword">const</span> entries = <span class="hljs-keyword">await</span> <span class="hljs-built_in">Promise</span>.all(promises);
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>(entries);
}</code></pre><h2 id="custom-renderer-of-marked">Custom renderer of Marked</h2>
<p>This blog&#39;s posts are written in Markdown, and its static site generator uses <a href="https://github.com/markedjs/marked">marked</a> to convert Markdown into HTML. One of my favorite things about <code>marked</code> is that we can easily customize its behavior with a custom renderer.</p>
<p>I used <code>span</code> tags to wrap <code>img</code> tag because they are rendered in <code>p</code> tag, which can&#39;t contain block tags like <code>div</code>.</p>
<pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomRenderer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">marked</span>.<span class="hljs-title">Renderer</span> </span>{
  image(src, title, alt) {
    <span class="hljs-keyword">const</span> dimensions = <span class="hljs-keyword">this</span>.imageDimensions &amp;&amp; <span class="hljs-keyword">this</span>.imageDimensions.get(src);
    <span class="hljs-keyword">if</span> (dimensions) {
      <span class="hljs-keyword">const</span> { width, height } = dimensions;
      <span class="hljs-keyword">const</span> aspectRatio = (height / width) * <span class="hljs-number">100</span>;
      <span class="hljs-keyword">return</span> (
        <span class="hljs-string">`&lt;span class="responsive-image-wrapper" style="max-width: <span class="hljs-subst">${width}</span>px;"&gt;`</span> +
        <span class="hljs-string">`&lt;span class="responsive-image-inner" style="padding-top: <span class="hljs-subst">${aspectRatio}</span>%;"&gt;`</span> +
        <span class="hljs-string">`&lt;img class="responsive-image" src="<span class="hljs-subst">${src}</span>" alt="<span class="hljs-subst">${alt}</span>"&gt;`</span> +
        <span class="hljs-string">"&lt;/span&gt;"</span> +
        <span class="hljs-string">"&lt;/span&gt;"</span>
      );
    }
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.image(src, title, alt);
  }

  <span class="hljs-comment">// To set images dimensions when images are changed</span>
  setImageDimensions(imageDimensions) {
    <span class="hljs-keyword">this</span>.imageDimensions = imageDimensions;
  }
}</code></pre><p>And CSS:</p>
<pre><code class="hljs css"><span class="hljs-selector-class">.responsive-image-wrapper</span> {
  <span class="hljs-attribute">display</span>: block;
}
<span class="hljs-selector-class">.responsive-image-inner</span> {
  <span class="hljs-attribute">display</span>: block;
  <span class="hljs-attribute">position</span>: relative;
}
<span class="hljs-selector-class">.responsive-image</span> {
  <span class="hljs-attribute">position</span>: absolute;
  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;
  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;
}</code></pre><h2 id="result">Result</h2>
<p>Here are a few examples:</p>
<ul>
<li><a href="/blog/2019/12/31/2019-in-review/">Full width on laptop and mobile</a></li>
<li><a href="/blog/2010/07/10/surface/">Full width on mobile but not on laptop</a></li>
</ul>
<p>Yay, no more page jump! Well, web fonts still make the page slightly jump, but that&#39;s another story...</p>
<p>I skipped some details that are specific to my website. The full code is <a href="https://github.com/shuhei/shuhei.github.com/pull/45">on GitHub</a>.</p>

]]></description><pubDate>Sun, 26 Jan 2020 15:57:00 GMT</pubDate><guid isPermaLink="false">https://shuheikagawa.com/blog/2020/01/26/responsive-images-with-a-static-site-generator/</guid></item><item><title>2019 in Review</title><link>https://shuheikagawa.com/blog/2019/12/31/2019-in-review/</link><description><![CDATA[
<p><span class="responsive-image-wrapper"><span class="responsive-image-outer" style="max-width: 1024px;"><span class="responsive-image-inner" style="padding-top: 75%;"><img class="responsive-image" src="/images/2019-aegina.jpg" alt="Aegina island in April"></span></span></span></p>
<h2 id="travels">Travels</h2>
<p>I visited six new countries and enjoyed each of them.</p>
<ul>
<li>January: Japan</li>
<li>March: Budapest, Hungary</li>
<li>April: Athens and Aegina, Greece</li>
<li>April: Wrocław, Poland</li>
<li>June: Prague, Czech Republic</li>
<li>August: Brussels and Bruges, Belgium</li>
<li>September: Munich, Germany</li>
<li>October: Dubrovnik, Croatia</li>
<li>November: Japan</li>
</ul>
<p>There are many more places to visit in Europe. I&#39;ll keep traveling in 2020.</p>
<h2 id="bike">Bike</h2>
<p>I bought an entry-level road bike at Decathlon in June. I used it for commuting and made day trips around Berlin. Berlin is surrounded by amazing fields. Blankenfelde is my favorite so far. I can&#39;t wait for the next Spring.</p>
<h2 id="budgeting">Budgeting</h2>
<p>I started using <a href="https://www.youneedabudget.com/">YNAB</a> at the end of the last year because a few of my friends were using it. I have used it throughout the year, and it&#39;s the first budgeting system that worked well for me. It helps us traveling regularly while saving money.</p>
<h2 id="books">Books</h2>
<p>I bought 55 physical books and 5 ebooks. That&#39;s three times more than the last year, probably because of a dedicated budget for buying books.</p>
<p>I finished reading 14 books and stranded somewhere in the middle of many books. <em>Quiet</em> made me more introverted and now I spend more time at home. <em>Bad Blood</em> and <em>Educated</em> blew my mind.</p>
<h2 id="drink">Drink</h2>
<p>While it&#39;s hard to name the best food of the year, the best beer of 2019 was a porter at <a href="https://goo.gl/maps/9X7UMJnqB1MrzqJcA">Kontynuacja</a> in Wrocław, Poland. The city had high-quality craft beers, and everything that I drank was amazing.</p>
<p>I had a chance to meet one of my most favorite brewers, Fuerst Wiacek, at a tap takeover event at Biererei Bar. I bought a T-shirt.</p>
<p>The trip to Brussels was epic as well because I visited a traditional lambic brewery where they still brew beer with yeasts in the air of the building! After tasting sour lambic, I bought a T-shirt there too.</p>
<p>In spite of the encounters with good beers, I don&#39;t drink as much as I used to anymore. When I started commuting by bike, I didn&#39;t want to get drunk and ride a bike. Even after I stopped commuting with my bike in the winter, the momentum kept going. I drank almost every day in Japan as an exception, but I almost quit drinking again after coming back to Berlin.</p>
<p>On the other hand, I started drinking bubble tea regularly. There is a <a href="http://www.comebuy2002.de/">Comebuy</a> shop near my office. I tried several bubble tea shops in Tokyo and found that only a few were better than Comebuy—I liked Yi Fang most.</p>
<h2 id="work">Work</h2>
<p>I am still working on the same team in Zalando. I looked for new opportunities inside and outside the company but decided to stay a bit more.</p>
<p>My team and I started on-call duties. Before that, another on-call team was taking care of my team&#39;s applications, and we tried to make sure that they didn&#39;t get called. Our focus on reliability hasn&#39;t changed much, but being on-call triggered new learnings. Writing post-mortem documents is my new favorite activity.</p>
<p>I started interviewing regularly, mostly on coding. I&#39;m still not used to it, and there&#39;s more to learn.</p>
<h2 id="side-projects">Side Projects</h2>
<p>In the first half of the year, I wrote <a href="https://github.com/shuhei/rolling-window">a small metrics utility</a> for work and <a href="/blog/2019/10/06/interpreter-and-compiler-in-rust/">a toy interpreter and compiler in Rust</a> for fun. In the last half, I focused more on learning classic algorithms than side projects.</p>
<h2 id="conferences--meetups">Conferences &amp; Meetups</h2>
<p>I attended two conferences, JSConf EU and JSConf JP, and had a chance to <a href="https://speakerdeck.com/shuhei/profiling-node-dot-js-apps-on-production">speak at a meetup</a>.</p>
<h2 id="2020">2020</h2>
<p>Looking back, 2019 was fun. I wish 2020 would be a happy year for all of you!</p>

]]></description><pubDate>Tue, 31 Dec 2019 23:50:00 GMT</pubDate><guid isPermaLink="false">https://shuheikagawa.com/blog/2019/12/31/2019-in-review/</guid></item><item><title>Winter Terminal (mostly Vim) Cleaning</title><link>https://shuheikagawa.com/blog/2019/12/31/winter-terminal-cleaning/</link><description><![CDATA[
<p>In December, I spent some time cleaning up my terminal setup. Dust had piled up in a year, and my terminal was getting slower. It was time to dust off.</p>
<p>Here are highlights of <a href="https://github.com/shuhei/dotfiles/compare/d5fa68a7514b040d0d19466ee85ebfbeb30b1d37...a8344b9d204af70f36ac8505df62425e87c5273d">the changes</a>.</p>
<h2 id="faster-text-rendering">Faster Text Rendering</h2>
<p>I noticed a non-negligible lag when I was editing JavaScript/TypeScript in Neovim. At first, I thought some Vim plugins caused it. But it was not true. Not only editing was slow, but also scrolling was slow. Text rendering itself was the problem.</p>
<p>I opened files of different types in Vim&#39;s vertical split and <code>less</code> in tmux&#39;s vertical split. And I scrolled down and (subjectively) evaluated the smoothness of scrolling.</p>
<p>It turned out that Vim was not the problem. With vertical splits of tmux, even <code>less</code> command was slow to scroll. Regardless of Vim or tmux, text rendering in vertical splits was slow on iTerm2. In retrospect, it makes sense because iTerm2 doesn&#39;t know about vertical split by Vim or tmux and can&#39;t limit rendering updates to the changed pane. <a href="https://www.iterm2.com/documentation-tmux-integration.html">iTerm2&#39;s tmux integration</a> may have helped, but I didn&#39;t try that.</p>
<p>I tried <a href="https://github.com/jwilm/alacritty">Alacritty</a>, and it was much faster! I had been using Alacritty before but switched back to iTerm2 for font ligatures. Now I didn&#39;t care much about font ligatures—ligatures look pretty, but glyphs for <code>!=</code> and <code>!==</code> confused me in JavaScript. So I switched to Alacritty again.</p>
<p>Also, I stopped using <a href="https://github.com/jordwalke/flatlandia">flatlandia</a> color scheme in Vim, and it improved the rendering speed a bit. I didn&#39;t dig into why, though.</p>
<h2 id="fzfvim">fzf.vim</h2>
<p><a href="https://github.com/junegunn/fzf.vim">fzf.vim</a> was a life changer. It provides a blazing fast incremental search for almost anything. I use it for file names (instead of <a href="https://github.com/kien/ctrlp.vim">ctrlp.vim</a>), commit history and grep. Especially, incremental grep with a preview is amazing.</p>
<h2 id="more-vim-cleaning">More Vim Cleaning</h2>
<ul>
<li><p>Started using <a href="https://github.com/dense-analysis/ale">ale</a> as a <a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</a> client. I was using ale for linting and fixing, and <a href="https://github.com/autozimu/LanguageClient-neovim">LanguageClient-neovim</a> for LSP features. LanguageClient-neovim also shows a quickfix window when a file contains syntax errors and was conflicting with ale. I learned that ale supported LSP as well and made it handle LSP too.</p>
<ul>
<li><strong>Update on Jan 3, 2020:</strong> I started using <a href="https://github.com/neoclide/coc.nvim">coc.nvim</a> instead of ale and deoplete.nvim for autocomplete, linting, fixing and LSP features. It makes Vim an IDE. Simply incredible.</li>
</ul>
</li>
<li><p>Configured Vim to open <code>:help</code> in a vertical split. <code>:help</code> is a valuable resource when configuring Vim. The problem for me was that Vim opens help in a horizontal split by default. Opening help in a vertical split makes it much easier to read.</p>
<pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> FileType <span class="hljs-keyword">help</span> <span class="hljs-keyword">wincmd</span> H</code></pre></li>
<li><p>Sorted out JavaScript/JSX/TypeScript syntax highlighting. Vim sets <code>javascriptreact</code> to <code>.jsx</code> and <code>typescriptreact</code> to <code>.tsx</code> by default. But those file types don&#39;t work well with the plugin ecosystem because plugins for <code>javascript</code>/<code>typescript</code> file types don&#39;t work with <code>javascriptreact</code>/<code>typescriptreact</code> and popular JSX/TSX plugins use <code>javascript.jsx</code> and <code>typescript.tsx</code>.</p>
<pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> BufRead,BufNewFile *.jsx <span class="hljs-keyword">set</span> <span class="hljs-keyword">filetype</span>=javascript.jsx
<span class="hljs-keyword">autocmd</span> BufRead,BufNewFile *.tsx <span class="hljs-keyword">set</span> <span class="hljs-keyword">filetype</span>=typescript.tsx</code></pre></li>
<li><p>Stopped unnecessarily lazy-loading Vim plugins with <a href="https://github.com/Shougo/dein.vim">dein.vim</a>. I had configured file-type-specific plugins as lazy plugins of dein.vim without understanding much. The truth was that lazy plugins are meaningful only for plugins with <code>plugin</code> directory. Most of the file-type-specific plugins don&#39;t have <code>plugin</code> directory and are lazily loaded by default with <code>ftdetect</code> and <code>ftplugin</code>. <code>:echo dein#check_lazy_plugins()</code> shows those plugins that are ill-configured. I finally learned <a href="https://learnvimscriptthehardway.stevelosh.com/chapters/42.html">what those plugin directories do</a> after using Vim for several years...</p>
</li>
<li><p>Reviewed key mappings and removed waiting time by avoiding mappings that prefixed other mappings. For example, I had mappings of <code>,g</code> and <code>,gr</code>. <code>,g</code> was slow because Vim had to wait for a while to determine it was <code>,g</code> or <code>,gr</code>.</p>
</li>
<li><p>Tried Vim 8 but switched back to Neovim. Vim 8 worked well, but tiny details looked smoother in Neovim. For example, when syntax highlighting hangs up, Vim 8 hangs up while Neovim disables syntax highlighting and goes on.</p>
</li>
<li><p>Started documentation of my setup. I keep forgetting key mappings, useful plugins that I occasionally use, how things are set up, etc.</p>
</li>
</ul>

]]></description><pubDate>Tue, 31 Dec 2019 15:20:00 GMT</pubDate><guid isPermaLink="false">https://shuheikagawa.com/blog/2019/12/31/winter-terminal-cleaning/</guid></item><item><title>Generating Twitter Card Images from Blog Post Titles</title><link>https://shuheikagawa.com/blog/2019/10/13/generating-twitter-card-images/</link><description><![CDATA[
<p>Twitter shows links to some websites as nice cards with images, but not for all websites. I realized that Twitter didn&#39;t show the card for my blog. Why? It turned out that they were called Twitter Cards, and Twitter showed them for websites that provided specific metadata. Is it common sense? Maybe, but I didn&#39;t know.</p>
<p><a href="https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/abouts-cards">Twitter Cards</a> give websites an ability to add an image, a video, etc. when they are shared on Twitter. A Twitter Card makes a tweet (physically) 3x more visible on the timeline. This post explains how I generated images from post titles using <a href="https://github.com/Automattic/node-canvas">node-canvas</a>, inspired by <a href="https://hatenablog.com/">Hatena Blog</a>.</p>
<p><span class="responsive-image-wrapper"><span class="responsive-image-outer" style="max-width: 531px;"><span class="responsive-image-inner" style="padding-top: 83.9924670433145%;"><img class="responsive-image" src="/images/twitter-card.png" alt="Twitter Card preview"></span></span></span></p>
<h2 id="meta-tags">Meta tags</h2>
<p>Twitter&#39;s bots look for <code>&lt;meta&gt;</code> tags in your page. If your page has a certain meta tags, it shows a Twitter Cards for links to the page. Check <a href="https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/abouts-cards">the documentation</a> for more details. The <code>&lt;meta&gt;</code> tags look like these:</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"twitter:card"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"summary_large_image"</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"twitter:site"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"@your_twitter_account"</span> /&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"twitter:title"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"My Blog Post"</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"twitter:description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"This is a blog post."</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"twitter:image"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"https://test.com/images/foo.png"</span> /&gt;</span></code></pre><p>Uh, they look a bit too platform-specific. <code>twitter:card</code> and <code>twitter:site</code> are specific to Twitter, but what about <code>twitter:title</code>, <code>twitter:description</code> and <code>twitter:image</code>? Twitter&#39;s bots also pick up Open Graph metadata tags, which are also used by other platforms like Facebook. So, we can use the <code>og:</code> tags instead of <code>twitter:</code> tags. Be careful that the attribute name of Open Graph metadata is <code>property</code> instead of <code>name</code>!</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"og:title"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"My Blog Post"</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"og:description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"This is a blog post."</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"og:image"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"https://test.com/images/foo.png"</span> /&gt;</span></code></pre><h2 id="homemade-static-site-generator">Homemade static site generator</h2>
<p><a href="https://github.com/shuhei/shuhei.github.com">My blog</a> is built with <a href="https://github.com/gulpjs/gulp">gulp</a> and some custom plugins and deployed to GitHub Pages. I started the blog with <a href="https://github.com/octopress/octopress">Octopress</a> several years ago and rewrote it with gulp when I was fascinated with gulp and JavaScript build tools. I once added React as a template engine and removed it later. Because of the history, its directory structure stays similar to the original one of Octopress. I write markdown files like <code>source/_posts/2019-10-13-foo.md</code> and the build system generates HTMLs like <code>/blog/2019/10/13/foo/index.html</code>.</p>
<p>To add Open Graph meta tags, I wrote a gulp plugin. Each gulp plugin is a transform stream that consumes and produces <a href="https://github.com/gulpjs/vinyl">vinyl</a> file objects. First, I made the plugin to extract image URLs from HTML and added necessary meta tags to the HTML template for <code>&lt;head&gt;</code> tag. Now, posts with at least one image got Twitter Cards.</p>
<h2 id="image-generation-and-text-wrapping">Image generation and text wrapping</h2>
<p>Most of my posts didn&#39;t have any images, while Twitter Cards don&#39;t look great without images. But I&#39;m too lazy to create an image for each blog post manually.</p>
<p>I found that <a href="https://hatenablog.com/">Hatena Blog</a>, a blogging platform in Japan, was <a href="https://twitter.com/search?q=%23%E3%81%AF%E3%81%A6%E3%81%AA%E3%83%96%E3%83%AD%E3%82%B0">generating images from blog post titles and descriptions</a>. It&#39;s a neat idea to promote blog posts without manual effort of blog authors. Can I replicate the image generation?</p>
<p>I found that many image-generation npm packages were using <a href="https://github.com/Automattic/node-canvas">node-canvas</a>. It provides the canvas API for Node.js and supports export options, including PNG. I decided to try that.</p>
<p>The canvas API was easy to use for me, but it doesn&#39;t provide text wrapping. I needed to come up with a way to break texts into lines. As <a href="https://stackoverflow.com/questions/2936112/text-wrap-in-a-canvas-element">a Q&amp;A on Stackoverflow</a> suggested, I used <code>ctx.measureText(text)</code> to measure the width of the text and remove words until the subtext fits the given width. And do the same for the remaining text.</p>
<p>The first line of this text wrapping algorithm is visualized as follows (it actually happens on the same line, but showing each try in its line for illustration):</p>
<p><span class="responsive-image-wrapper"><span class="responsive-image-outer" style="max-width: 700px;"><span class="responsive-image-inner" style="padding-top: 30.28571428571429%;"><img class="responsive-image" src="/images/twitter-card-image-line-break.png" alt="Wrapping text"></span></span></span></p>
<p>There were two edge cases to be covered. The first case is that a long word doesn&#39;t fit into the given width. The other case is that the text is split into too many lines, and they overflow the given height. I covered them by decreasing the font size until the entire text fits into the given rectangle.</p>
<p>The algorithm for the first edge case is visualized as follows (it tries smaller fonts until the word fits into the width):</p>
<p><span class="responsive-image-wrapper"><span class="responsive-image-outer" style="max-width: 700px;"><span class="responsive-image-inner" style="padding-top: 37%;"><img class="responsive-image" src="/images/twitter-card-image-font-sizes.png" alt="Try smaller font sizes"></span></span></span></p>
<p>I eventually came up with JavaScript code like this (<a href="https://github.com/shuhei/shuhei.github.com/blob/f30cb5cd85a4ef35a4fb73d94a01da44e03ae116/plugins/title-image.js">the full code is on GitHub</a>):</p>
<pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fitTextIntoRectangle</span>(<span class="hljs-params">{ ctx, text, maxFontSize, rect }</span>) </span>{
  <span class="hljs-comment">// Reduce font size until the title fits into the image.</span>
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> fontSize = maxFontSize; fontSize &gt; <span class="hljs-number">0</span>; fontSize -= <span class="hljs-number">1</span>) {
    ctx.font = getTitleFont(fontSize);
    <span class="hljs-keyword">let</span> words = text.split(<span class="hljs-string">" "</span>);
    <span class="hljs-keyword">let</span> { y } = rect;
    <span class="hljs-keyword">const</span> lines = [];
    <span class="hljs-keyword">while</span> (words.length &gt; <span class="hljs-number">0</span>) {
      <span class="hljs-keyword">let</span> i;
      <span class="hljs-keyword">let</span> size;
      <span class="hljs-keyword">let</span> subtext;
      <span class="hljs-comment">// Remove words until the rest fit into the width.</span>
      <span class="hljs-keyword">for</span> (i = words.length; i &gt;= <span class="hljs-number">0</span>; i -= <span class="hljs-number">1</span>) {
        subtext = words.slice(<span class="hljs-number">0</span>, i).join(<span class="hljs-string">" "</span>);
        size = ctx.measureText(subtext);

        <span class="hljs-keyword">if</span> (size.width &lt;= rect.width) {
          <span class="hljs-keyword">break</span>;
        }
      }

      <span class="hljs-keyword">if</span> (i &lt;= <span class="hljs-number">0</span>) {
        <span class="hljs-comment">// A word doesn't fit into a line. Try a smaller font size.</span>
        <span class="hljs-keyword">break</span>;
      }

      lines.push({
        <span class="hljs-attr">text</span>: subtext,
        <span class="hljs-attr">x</span>: rect.x,
        <span class="hljs-attr">y</span>: y + size.emHeightAscent
      });

      words = words.slice(i);
      y += size.emHeightAscent + size.emHeightDescent;
    }

    <span class="hljs-keyword">const</span> space = rect.y + rect.height - y;
    <span class="hljs-keyword">if</span> (words.length === <span class="hljs-number">0</span> &amp;&amp; space &gt;= <span class="hljs-number">0</span>) {
      <span class="hljs-comment">// The title fits into the image with the font size.</span>
      <span class="hljs-comment">// Vertically centering the text in the given rectangle.</span>
      <span class="hljs-keyword">const</span> centeredLines = lines.map(<span class="hljs-function"><span class="hljs-params">line</span> =&gt;</span> {
        <span class="hljs-keyword">return</span> {
          ...line,
          <span class="hljs-attr">y</span>: line.y + space / <span class="hljs-number">2</span>
        };
      });
      <span class="hljs-keyword">return</span> {
        fontSize,
        <span class="hljs-attr">lines</span>: centeredLines
      };
    }
  }

  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(
    <span class="hljs-string">`Text layout failed: The given text '<span class="hljs-subst">${text}</span>' did not fit into the given rectangle <span class="hljs-subst">${<span class="hljs-built_in">JSON</span>.stringify(
      rect
    )}</span> even with the smallest font size (1)`</span>
  );
}</code></pre><h2 id="font">Font</h2>
<p>My website is using <a href="https://fonts.google.com/specimen/IBM+Plex+Sans">IBM Plex Sans</a> via Google Fonts. I wanted to use the same font in the images. Fortunately, node-canvas provides an API to load fonts, and the font is available also on npm.</p>
<pre><code class="hljs sh">yarn add -D @ibm/plex</code></pre><pre><code class="hljs js"><span class="hljs-keyword">const</span> { registerFont } = <span class="hljs-built_in">require</span>(<span class="hljs-string">"canvas"</span>);

registerFont(
  <span class="hljs-string">"./node_modules/@ibm/plex/IBM-Plex-Sans/fonts/complete/otf/IBMPlexSans-Bold.otf"</span>,
  {
    <span class="hljs-attr">family</span>: <span class="hljs-string">"IBM Plex Sans"</span>,
    <span class="hljs-attr">weight</span>: <span class="hljs-string">"bold"</span>
  }
);

<span class="hljs-comment">// ...</span>

ctx.font = <span class="hljs-string">"bold 30px 'IBM Plex Sans'"</span>;</code></pre><h2 id="done">Done!</h2>
<p>So, the feature is done. It looked trivial at first glance, but the text wrapping algorithm was fun to write. Now I got to write more blog posts to use this feature!</p>

]]></description><pubDate>Sun, 13 Oct 2019 16:59:00 GMT</pubDate><guid isPermaLink="false">https://shuheikagawa.com/blog/2019/10/13/generating-twitter-card-images/</guid></item><item><title>Migrating from bash to zsh</title><link>https://shuheikagawa.com/blog/2019/10/08/migrating-from-bash-to-zsh/</link><description><![CDATA[
<p>A few days ago, I updated my Macbook Air to macOS Catalina. The installation took some time, but it was done when I got up the next morning. The applications that I use seemed to work fine on Catalina. But bash started complaining at the beginning of new sessions.</p>
<pre><code class="hljs console">The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.</code></pre><p>I asked whether I should migrate to zsh on Twitter. Three people said &quot;yes&quot; as if it was common sense. OK, let&#39;s migrate.</p>
<h2 id="changing-the-default-shell-of-tmux">Changing the default shell of tmux</h2>
<p>First, I followed the instruction from Apple.</p>
<pre><code class="hljs sh">chsh -s /bin/zsh</code></pre><p>However, it didn&#39;t change the default shell of tmux. I restarted sessions in tmux, and restarted iTerm 2 and the tmux server. But tmux still started bash sessions. Why?</p>
<p>I googled. There was <a href="https://superuser.com/questions/253786/how-can-i-make-tmux-use-my-default-shell">a Q&amp;A for the exact problem</a> on superuser. The <code>default-command</code> option of tmux is the default shell. I had a hardcoded <code>bash</code> there! By the way, <code>reattach-to-user-namespace</code> is for sharing Mac&#39;s clipboard with tmux.</p>
<pre><code class="hljs ">set-option -g default-command &quot;reattach-to-user-namespace -l bash&quot;</code></pre><p>I updated it with <code>SHELL</code> environment variable so that I can migrate to any shell in the future!</p>
<pre><code class="hljs ">set-option -g default-command &quot;reattach-to-user-namespace -l ${SHELL}&quot;</code></pre><h2 id="command-prompt">Command prompt</h2>
<p>Then I installed <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> and copied my <code>.bash_profile</code> to <code>.zshrc</code>. Most of the content of my <code>.bash_profile</code> were aliases and <code>PATH</code>s. They worked fine on zsh too.</p>
<p>But zsh has a different format for prompt. oh-my-zsh provides a lot of nice prompt themes, but I wanted to keep using the one that I had configured with bash. Let&#39;s migrate it to zsh.</p>
<p><del>oh-my-zsh has a directory for custom themes (<code>.oh-my-zsh/custom/themes</code>). I moved the <code>custom</code> directory to <a href="https://github.com/shuhei/dotfiles">my dotfiles repo</a> and symlinked it so that I can manage my custom theme with Git without forking oh-my-zsh itself.</del> [Update on Oct 24, 2019] I realized that this symlink approach prevents updates of oh-my-zsh because it modifies the files in the git local clone of oh-my-zsh. <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Customization">The official customization guide</a> recommends to use <code>ZSH_CUSTOM</code> variable to specify the location of a custom directory. Now I&#39;m using <code>ZSH_CUSTOM</code> to point to a directory in my dotfiles repo.</p>
<p>Eventually, I came up with a theme like this:</p>
<p><span class="responsive-image-wrapper"><span class="responsive-image-outer" style="max-width: 607px;"><span class="responsive-image-inner" style="padding-top: 16.639209225700164%;"><img class="responsive-image" src="/images/zsh_prompt.png" alt="my custom theme"></span></span></span></p>
<pre><code class="hljs bash">ZSH_THEME_GIT_PROMPT_PREFIX=<span class="hljs-string">"%{<span class="hljs-variable">$fg</span>[white]%}("</span>
ZSH_THEME_GIT_PROMPT_SUFFIX=<span class="hljs-string">"%{<span class="hljs-variable">$fg</span>[white]%})%{<span class="hljs-variable">$reset_color</span>%}"</span>
ZSH_THEME_GIT_PROMPT_DIRTY=<span class="hljs-string">"*"</span>
ZSH_THEME_GIT_PROMPT_CLEAN=<span class="hljs-string">""</span>

<span class="hljs-comment"># %~ is the current working directory relative to the home directory</span>
PROMPT=<span class="hljs-string">'[$FG[228]%~%{$reset_color%}]'</span>
PROMPT+=<span class="hljs-string">' $(git_prompt_info)'</span>
PROMPT+=<span class="hljs-string">' %(?.$FG[154].$FG[009])€%{$reset_color%} '</span></code></pre><p>Each oh-my-zsh theme defines a variable called <code>PROMPT</code>. Aside from <a href="http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html">its syntax</a>, I was not sure how and when <code>PROMPT</code> was evaluated. In hindsight, it is a string that is built once when a session starts or <code>source .zshrc</code>. Every time a prompt is shown, <code>PROMPT</code> is evaluated, meaning escapes (starting with <code>%</code>) and variables in it are expanded.</p>
<h3 id="colors">Colors</h3>
<p>At the beginning, I was baffled by how to specify colors. For example, the following <code>PROMPT</code> shows &quot;some red text&quot; in red.</p>
<pre><code class="hljs bash">PROMPT=<span class="hljs-string">'%{$fg[red]%}some red text%{$reset_color%}'</span></code></pre><p><code>$fg[red]</code> has the code that makes its following text red. <code>$reset_color</code> has the code that resets the color. The tricky part is that these codes need to be surrounded by <code>%{</code> and <code>%}</code> in <code>PROMPT</code>.</p>
<p><a href="https://github.com/zsh-users/zsh/blob/243e46998eb29665ec345e531b2d1bb6921ed578/Functions/Misc/colors#L97-L117">zsh provides handy variables for colors</a>.</p>
<ul>
<li><code>reset_color</code></li>
<li><code>fg</code>, <code>fg_bold</code>, <code>fg_no_bold</code>: They are associative arrays (similar to JavaScript objects).</li>
<li><code>bg</code>, <code>bg_bold</code>, <code>bg_no_bold</code></li>
</ul>
<p>Also, <a href="https://github.com/robbyrussell/oh-my-zsh/blob/b09aed9cc7e2099f3e7f2aa2632660bc510f3e35/lib/spectrum.zsh">oh-my-zsh provides 256 colors</a>.</p>
<ul>
<li><code>FX</code>: This has codes for text effects like <code>FX[underline]</code>.</li>
<li><code>FG</code>: 256 colors for foreground like <code>FG[102]</code>.</li>
<li><code>BG</code>: 256 colors for background like <code>BG[123]</code>.</li>
</ul>
<p><code>spectrum_ls</code> and <code>spectrum_bls</code> commands show you all the 256 colors! Note that values in <code>FX</code>, <code>FG</code> and <code>BG</code> are already surrounded by <code>%{</code> and <code>%}</code>, and we don&#39;t need to do it again.</p>
<p>We can examine those variables in the terminal.</p>
<pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">${fg[yellow]}</span>hello<span class="hljs-variable">${reset_color}</span> <span class="hljs-variable">${bg[green]}</span>world<span class="hljs-variable">${reset_color}</span>"</span>

<span class="hljs-comment"># `(kv)` extracts key values from an associative array.</span>
<span class="hljs-built_in">echo</span> <span class="hljs-variable">${(kv)fg}</span>
<span class="hljs-built_in">echo</span> <span class="hljs-variable">${(kv)FG}</span></code></pre><h3 id="exit-code">Exit code</h3>
<p>With bash, <a href="/blog/2015/10/18/color-prompt-by-exit-code/">I had a trick to change the color of the prompt by the previous command&#39;s exit code</a>. How can I achieve this with zsh?</p>
<p><span class="responsive-image-wrapper"><span class="responsive-image-outer" style="max-width: 557px;"><span class="responsive-image-inner" style="padding-top: 17.7737881508079%;"><img class="responsive-image" src="/images/exit_code.png" alt="Change color by exit code"></span></span></span></p>
<p>Surprisingly, <a href="https://stackoverflow.com/questions/4466245/customize-zshs-prompt-when-displaying-previous-command-exit-code">zsh prompt expression has a special syntax for switching prompt by exit code</a>. To be accurate, it&#39;s a combination of a ternary operator and <code>?</code> for exit code check.</p>
<pre><code class="hljs bash"><span class="hljs-comment"># Shows "foo" if the exit code is 0 and "bar" if the exit code is non-zero.</span>
%(?.foo.bar)</code></pre><p>The following expression shows the Euro sign in green if the exit code is 0 and in red if the exit code is non-zero.</p>
<pre><code class="hljs bash">%(?.%{<span class="hljs-variable">$fg</span>[green]%}.%{<span class="hljs-variable">$fg</span>[red]%})€%{<span class="hljs-variable">$reset_color</span>%}</code></pre><h3 id="git-info">Git info</h3>
<p><code>git_prompt_info()</code> function outputs git info such as the branch name and the state of the working tree (clean or dirty). We can customize its output by <code>ZSH_THEME_GIT_PROMPT_*</code> variables.</p>
<p>I wrote something like this:</p>
<pre><code class="hljs bash">ZSH_THEME_GIT_PROMPT_PREFIX=<span class="hljs-string">"%{<span class="hljs-variable">$fg</span>[white]%}("</span>
ZSH_THEME_GIT_PROMPT_SUFFIX=<span class="hljs-string">"%{<span class="hljs-variable">$fg</span>[white]%})%{<span class="hljs-variable">$reset_color</span>%}"</span>
ZSH_THEME_GIT_PROMPT_DIRTY=<span class="hljs-string">"*"</span>
ZSH_THEME_GIT_PROMPT_CLEAN=<span class="hljs-string">""</span>

PROMPT=<span class="hljs-string">"... <span class="hljs-variable">$(git_prompt_info)</span> ..."</span></code></pre><p>I thought it was done and went back to work. But when I switched the git branch, the prompt stayed the same. Why? I googled again. There was <a href="https://github.com/robbyrussell/oh-my-zsh/issues/4826">an issue</a> for the same problem. The <code>PROMPT</code> needs to be created with single quotes instead of double quotes so that dynamic parts are not evaluated when it&#39;s defined!</p>
<pre><code class="hljs bash">PROMPT=<span class="hljs-string">'... $(git_prompt_info) ...'</span></code></pre><h2 id="conclusion">Conclusion</h2>
<p>I have migrated my terminal from bash to zsh. My initial motivation was passive (Catalina deprecated bash), but it&#39;s always fun to try something new (to me). I&#39;m looking forward to trying cool zsh plugins and tricks!</p>

]]></description><pubDate>Wed, 09 Oct 2019 23:20:00 GMT</pubDate><guid isPermaLink="false">https://shuheikagawa.com/blog/2019/10/08/migrating-from-bash-to-zsh/</guid></item><item><title>Writing an Interpreter and a Compiler in Rust</title><link>https://shuheikagawa.com/blog/2019/10/06/interpreter-and-compiler-in-rust/</link><description><![CDATA[
<p>In the spring of this year, I read <a href="https://interpreterbook.com/">Writing an Interpreter in Go</a> and <a href="https://compilerbook.com/">Writing a Compiler in Go</a> by <a href="https://thorstenball.com/">Thorsten Ball</a>, and implemented <a href="https://github.com/shuhei/cymbal">an interpreter and a compiler</a> from the books in Rust. (I started writing this post in April but left unfinished for six months. Now I&#39;m finishing it.)</p>
<p>The first book <a href="https://interpreterbook.com/">Writing an Interpreter in Go</a> is about writing a parser and an interpreter for a programming language called Monkey. Monkey&#39;s feature set is limited, but it has some interesting features that modern programming languages have—such as function as a first-class citizen and closures.</p>
<pre><code class="hljs js"><span class="hljs-keyword">let</span> fibonacci = fn(x) {
    <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) {
        <span class="hljs-number">0</span>
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>) {
            <span class="hljs-number">1</span>
        } <span class="hljs-keyword">else</span> {
            fibonacci(x - <span class="hljs-number">1</span>) + fibonacci(x - <span class="hljs-number">2</span>)
        }
    }
};
fibonacci(<span class="hljs-number">15</span>);</code></pre><p>The second book <a href="https://compilerbook.com/">Writing a Compiler in Go</a> taught me to write a simple compiler and a simple virtual machine. The compiler compiles Monkey scripts into instructions (and constants), and the virtual machine executes the instructions. For example, an expression <code>1 + 2</code> is compiled into:</p>
<pre><code class="hljs rs"><span class="hljs-comment">// Constants</span>
<span class="hljs-built_in">vec!</span>[
    Object::Integer(<span class="hljs-number">1</span>),
    Object::Integer(<span class="hljs-number">2</span>),
]

<span class="hljs-comment">// Instructions</span>
<span class="hljs-built_in">vec!</span>[
    make_u16(OpCode::Constant, <span class="hljs-number">0</span>),
    make_u16(OpCode::Constant, <span class="hljs-number">1</span>),
    make(OpCode::Add),
    make(OpCode::Pop),
]</code></pre><h2 id="how-i-started">How I started</h2>
<p>I had bought <em>Writing an Interpreter in Go</em> more in 2017, but it had been sleeping in my bookshelf (<a href="https://en.wikipedia.org/wiki/Tsundoku">Tsundoku</a>). Recently, I wanted to relearn a little Go for work. I took the book from my bookshelf and started following the book—typing the code in Go. I did two chapters, and new Go syntaxes stopped appearing. I achieved my initial purpose—relearning Go—earlier than I thought because the book used a limited set of Go&#39;s language features. Then Rust came to my mind.</p>
<p>Before starting this project, I had written two simple command-line tools with Rust (<a href="https://github.com/shuhei/colortty">colortty</a> and <a href="https://github.com/shuhei/ynan26">ynan26</a>), but they were too small to learn different aspects of Rust. I wanted to learn more by implementing something not trivial.</p>
<h2 id="good-things-about-rust">Good things about Rust</h2>
<p>First, I rewrote what I had written in Go with Rust and continued the rest of the book. The implementation in Rust was less redundant than the one in Go. Also, it was more type-safe thanks to <code>enum</code>s and <code>Result</code>. Especially <code>enum</code>s were perfect for AST (Abstract Syntax Tree) and evaluated objects.</p>
<pre><code class="hljs rs"><span class="hljs-comment">// An example of AST</span>
<span class="hljs-meta">#[derive(Debug, PartialEq, Clone, Hash, Eq)]</span>
<span class="hljs-keyword">pub</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Expression</span></span> {
    Identifier(<span class="hljs-built_in">String</span>),
    IntegerLiteral(<span class="hljs-built_in">i64</span>),
    StringLiteral(<span class="hljs-built_in">String</span>),
    Boolean(<span class="hljs-built_in">bool</span>),
    Array(<span class="hljs-built_in">Vec</span>&lt;Expression&gt;),
    Hash(HashLiteral),
    Index(<span class="hljs-built_in">Box</span>&lt;Expression&gt;, <span class="hljs-built_in">Box</span>&lt;Expression&gt;),
    Prefix(Prefix, <span class="hljs-built_in">Box</span>&lt;Expression&gt;),
    Infix(Infix, <span class="hljs-built_in">Box</span>&lt;Expression&gt;, <span class="hljs-built_in">Box</span>&lt;Expression&gt;),
    If(<span class="hljs-built_in">Box</span>&lt;Expression&gt;, BlockStatement, <span class="hljs-built_in">Option</span>&lt;BlockStatement&gt;),
    FunctionLiteral(<span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">String</span>&gt;, BlockStatement),
    Call(<span class="hljs-built_in">Box</span>&lt;Expression&gt;, <span class="hljs-built_in">Vec</span>&lt;Expression&gt;),
}</code></pre><p>However, harder parts came later when the compiler and the virtual machine grew complex.</p>
<h2 id="nested-symbol-tables-were-a-linked-list">Nested symbol tables were a linked list</h2>
<p>To implement nested scopes, the Compiler Book uses self-recursive <code>struct</code>s for nested symbol tables. I was struggling with their ownership. I tried <code>Rc</code> and <code>RefCell</code>, but still was not able to get through them.</p>
<p>Then, I went to Rust Hack and Learn—a local meetup at Mozilla Berlin office—and asked how to get over ownership rules. One person (sorry, I didn&#39;t ask his name!) recommended me a book <a href="https://rust-unofficial.github.io/too-many-lists/">Learn Rust With Entirely Too Many Linked Lists </a>.</p>
<p>The book introduces several versions of linked list implementations in Rust even though its precaution is not to implement linked lists in Rust. It had some techniques that I had recently learned, and much more. After a while, I realized that I had been trying to implement a linked list. Then I changed the self-recursive <code>struct</code> to a <code>Vec</code>, and it solved most of my headaches. So, the book&#39;s precaution was right. Don&#39;t implement a liked list.</p>
<pre><code class="hljs rs"><span class="hljs-comment">// Before</span>
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SymbolTable</span></span> {
  store: HashMap&lt;<span class="hljs-built_in">String</span>, Symbol&gt;,

  <span class="hljs-comment">// This is a linked list!</span>
  outer: <span class="hljs-built_in">Option</span>&lt;SymbolTable&gt;;
}

<span class="hljs-comment">// After</span>
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SymbolLayer</span></span> {
  store: HashMap&lt;<span class="hljs-built_in">String</span>, Symbol&gt;,
}

<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SymbolTable</span></span> {
  current: SymbolLayer;
  outers: <span class="hljs-built_in">Vec</span>&lt;SymbolStore&gt;;
}</code></pre><h2 id="i-learned-basics-of-how-programs-work-at-low-level">I learned basics of how programs work at low-level</h2>
<p>Even before starting the project, I had some vague ideas about parser, interpreter and compiler thanks to my previous projects. But I hadn&#39;t had concrete ideas about compilers, especially about how to translate high-level code like function calls and closures into low-level instructions. After the project, now I can confidently say what is on the stack and what is on the heap.</p>
<p>Also, the knowledge about stack was useful to understand some of the concepts of Rust itself. Rust&#39;s compiler to know the sizes of types because it needs to generate machine code that allocates values of the types on the stack.</p>
<h2 id="conclusion">Conclusion</h2>
<p>It was a fun project. I learned something, but there is much more to learn in Rust. Also, now I can admire modern interpreters and compilers like V8 more than before.</p>
<p><a href="https://interpreterbook.com/">Writing an Interpreter in Go</a> and <a href="https://compilerbook.com/">Writing a Compiler in Go</a> are great. I liked their hands-on approach with many unit tests.</p>

]]></description><pubDate>Sun, 06 Oct 2019 23:32:00 GMT</pubDate><guid isPermaLink="false">https://shuheikagawa.com/blog/2019/10/06/interpreter-and-compiler-in-rust/</guid></item></channel></rss>